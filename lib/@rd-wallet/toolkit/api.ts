/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum OpenPaymentErrorCode {
    _UNKNOWN_OPEC = 0,
    PAYMENT_ERROR = 6001,
    PARAMS_ERROR = 6002,
    WALLET_NOT_EXISTS = 6101,
    WALLET_INSUFFICIENT_FUND = 6102,
    WALLET_STATUS_INVALID = 6103,
    WALLET_SHOULD_NOT_SAME = 6104,
    TRANSFER_LIMIT = 6201,
    TRANSACTION_LIMIT = 6202,
    FRAUD_RULE_HIT = 6203,
    INVALID_BIC = 6204,
    INVALID_PAYEE_ACCOUNT_NAME = 6205,
    INVALID_PAYEE_ACCOUNT_NO = 6206,
    FPS_REJECTED = 6207,
    COLLECTION_LIMIT = 6208,
    TRANSACTION_IS_DUPLICATE = 6209,
    TRANSACTION_CANNOT_BE_FOUND = 6003
}
export enum TxnProxyType {
    _UNKNOWN_TYPE = 0,
    M = 1,
    B = 2,
    E = 3,
    S = 4
}
export enum TxnPurpose {
    _UNKNOWN_TP = 0,
    GOD = 1,
    CTF = 2,
    STR = 3,
    OTF = 4
}
export enum OpenOrderStatus {
    _UNKNOWN_OPS = 0,
    SUBMITTED = 1,
    SUCCESSFUL = 2,
    FAILED = 3,
    CANCELLED = 4,
    REFUNDED = 5,
    REJECT = 6
}
export enum PaymentBusinessType {
    PAYMENT_BUSINESS_TYPE_UNKNOWN = 0,
    PAYMENT_BUSINESS_TYPE_FUND_IN = 1,
    PAYMENT_BUSINESS_TYPE_PAY_OUT = 2,
    PAYMENT_BUSINESS_TYPE_REFUND = 3,
    FX_BUSINESS_TYPE_SUCCESS = 4,
    PROFILE_UPDATE = 5,
    ONE_KEY_PEOPLE_BIND = 6,
    ONE_KEY_PEOPLE_SIGNED = 7,
    RD_CHECK_ERROR = 8,
    RD_CHECK_SUCCESS = 9,
    BANK_CHECK_FAIL = 10,
    BANK_CHECK_SUCCESS = 11
}
export class OpenRdtRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        currency?: string;
        amount?: number;
        messageToPayee?: string;
        accountId?: string;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
        receivingParty?: RdtReceivingParty;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("messageToPayee" in data && data.messageToPayee != undefined) {
                this.messageToPayee = data.messageToPayee;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("outOrderNo" in data && data.outOrderNo != undefined) {
                this.outOrderNo = data.outOrderNo;
            }
            if ("receivingParty" in data && data.receivingParty != undefined) {
                this.receivingParty = data.receivingParty;
            }
        }
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get messageToPayee() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set messageToPayee(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get outOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set outOrderNo(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get receivingParty() {
        return pb_1.Message.getWrapperField(this, RdtReceivingParty, 9) as RdtReceivingParty;
    }
    set receivingParty(value: RdtReceivingParty) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_receivingParty() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data: {
        currency?: string;
        amount?: number;
        messageToPayee?: string;
        accountId?: string;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
        receivingParty?: ReturnType<typeof RdtReceivingParty.prototype.toObject>;
    }): OpenRdtRequest {
        const message = new OpenRdtRequest({});
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.messageToPayee != null) {
            message.messageToPayee = data.messageToPayee;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.outOrderNo != null) {
            message.outOrderNo = data.outOrderNo;
        }
        if (data.receivingParty != null) {
            message.receivingParty = RdtReceivingParty.fromObject(data.receivingParty);
        }
        return message;
    }
    toObject() {
        const data: {
            currency?: string;
            amount?: number;
            messageToPayee?: string;
            accountId?: string;
            requestId?: string;
            institutionId?: string;
            outOrderNo?: string;
            receivingParty?: ReturnType<typeof RdtReceivingParty.prototype.toObject>;
        } = {};
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.messageToPayee != null) {
            data.messageToPayee = this.messageToPayee;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.outOrderNo != null) {
            data.outOrderNo = this.outOrderNo;
        }
        if (this.receivingParty != null) {
            data.receivingParty = this.receivingParty.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.currency.length)
            writer.writeString(1, this.currency);
        if (this.amount != 0)
            writer.writeInt64(2, this.amount);
        if (this.messageToPayee.length)
            writer.writeString(3, this.messageToPayee);
        if (this.accountId != "0")
            writer.writeInt64String(4, this.accountId);
        if (this.requestId.length)
            writer.writeString(6, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(7, this.institutionId);
        if (this.outOrderNo.length)
            writer.writeString(8, this.outOrderNo);
        if (this.has_receivingParty)
            writer.writeMessage(9, this.receivingParty, () => this.receivingParty.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenRdtRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenRdtRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currency = reader.readString();
                    break;
                case 2:
                    message.amount = reader.readInt64();
                    break;
                case 3:
                    message.messageToPayee = reader.readString();
                    break;
                case 4:
                    message.accountId = reader.readInt64String();
                    break;
                case 6:
                    message.requestId = reader.readString();
                    break;
                case 7:
                    message.institutionId = reader.readInt64String();
                    break;
                case 8:
                    message.outOrderNo = reader.readString();
                    break;
                case 9:
                    reader.readMessage(message.receivingParty, () => message.receivingParty = RdtReceivingParty.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenRdtRequest {
        return OpenRdtRequest.deserialize(bytes);
    }
}
export class OpenFpsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        currency?: OpenFpsRequestFpsTxnCcy;
        amount?: number;
        accountId?: string;
        messageToPayee?: string;
        receivingParty?: FpsReceivingParty;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("messageToPayee" in data && data.messageToPayee != undefined) {
                this.messageToPayee = data.messageToPayee;
            }
            if ("receivingParty" in data && data.receivingParty != undefined) {
                this.receivingParty = data.receivingParty;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("outOrderNo" in data && data.outOrderNo != undefined) {
                this.outOrderNo = data.outOrderNo;
            }
        }
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 1, OpenFpsRequestFpsTxnCcy._UNKNOWN_FTC) as OpenFpsRequestFpsTxnCcy;
    }
    set currency(value: OpenFpsRequestFpsTxnCcy) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get messageToPayee() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set messageToPayee(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get receivingParty() {
        return pb_1.Message.getWrapperField(this, FpsReceivingParty, 5) as FpsReceivingParty;
    }
    set receivingParty(value: FpsReceivingParty) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_receivingParty() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get outOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set outOrderNo(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        currency?: OpenFpsRequestFpsTxnCcy;
        amount?: number;
        accountId?: string;
        messageToPayee?: string;
        receivingParty?: ReturnType<typeof FpsReceivingParty.prototype.toObject>;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
    }): OpenFpsRequest {
        const message = new OpenFpsRequest({});
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.messageToPayee != null) {
            message.messageToPayee = data.messageToPayee;
        }
        if (data.receivingParty != null) {
            message.receivingParty = FpsReceivingParty.fromObject(data.receivingParty);
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.outOrderNo != null) {
            message.outOrderNo = data.outOrderNo;
        }
        return message;
    }
    toObject() {
        const data: {
            currency?: OpenFpsRequestFpsTxnCcy;
            amount?: number;
            accountId?: string;
            messageToPayee?: string;
            receivingParty?: ReturnType<typeof FpsReceivingParty.prototype.toObject>;
            requestId?: string;
            institutionId?: string;
            outOrderNo?: string;
        } = {};
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.messageToPayee != null) {
            data.messageToPayee = this.messageToPayee;
        }
        if (this.receivingParty != null) {
            data.receivingParty = this.receivingParty.toObject();
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.outOrderNo != null) {
            data.outOrderNo = this.outOrderNo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.currency != OpenFpsRequestFpsTxnCcy._UNKNOWN_FTC)
            writer.writeEnum(1, this.currency);
        if (this.amount != 0)
            writer.writeInt64(2, this.amount);
        if (this.accountId != "0")
            writer.writeInt64String(3, this.accountId);
        if (this.messageToPayee.length)
            writer.writeString(4, this.messageToPayee);
        if (this.has_receivingParty)
            writer.writeMessage(5, this.receivingParty, () => this.receivingParty.serialize(writer));
        if (this.requestId.length)
            writer.writeString(6, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(7, this.institutionId);
        if (this.outOrderNo.length)
            writer.writeString(8, this.outOrderNo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenFpsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenFpsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currency = reader.readEnum();
                    break;
                case 2:
                    message.amount = reader.readInt64();
                    break;
                case 3:
                    message.accountId = reader.readInt64String();
                    break;
                case 4:
                    message.messageToPayee = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.receivingParty, () => message.receivingParty = FpsReceivingParty.deserialize(reader));
                    break;
                case 6:
                    message.requestId = reader.readString();
                    break;
                case 7:
                    message.institutionId = reader.readInt64String();
                    break;
                case 8:
                    message.outOrderNo = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenFpsRequest {
        return OpenFpsRequest.deserialize(bytes);
    }
}
export enum OpenFpsRequestFpsTxnCcy {
    _UNKNOWN_FTC = 0,
    HKD = 1,
    CNY = 2
}
export class OpenTtRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        currency?: string;
        amount?: number;
        messageToPayee?: string;
        accountId?: string;
        receivingParty?: TtReceivingParty;
        purpose?: TxnPurpose;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
        payerAddress?: MttPayerAddress;
        feeMode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("messageToPayee" in data && data.messageToPayee != undefined) {
                this.messageToPayee = data.messageToPayee;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("receivingParty" in data && data.receivingParty != undefined) {
                this.receivingParty = data.receivingParty;
            }
            if ("purpose" in data && data.purpose != undefined) {
                this.purpose = data.purpose;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("outOrderNo" in data && data.outOrderNo != undefined) {
                this.outOrderNo = data.outOrderNo;
            }
            if ("payerAddress" in data && data.payerAddress != undefined) {
                this.payerAddress = data.payerAddress;
            }
            if ("feeMode" in data && data.feeMode != undefined) {
                this.feeMode = data.feeMode;
            }
        }
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get messageToPayee() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set messageToPayee(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get receivingParty() {
        return pb_1.Message.getWrapperField(this, TtReceivingParty, 5) as TtReceivingParty;
    }
    set receivingParty(value: TtReceivingParty) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_receivingParty() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get purpose() {
        return pb_1.Message.getFieldWithDefault(this, 6, TxnPurpose._UNKNOWN_TP) as TxnPurpose;
    }
    set purpose(value: TxnPurpose) {
        pb_1.Message.setField(this, 6, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get outOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set outOrderNo(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get payerAddress() {
        return pb_1.Message.getWrapperField(this, MttPayerAddress, 10) as MttPayerAddress;
    }
    set payerAddress(value: MttPayerAddress) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_payerAddress() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get feeMode() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set feeMode(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        currency?: string;
        amount?: number;
        messageToPayee?: string;
        accountId?: string;
        receivingParty?: ReturnType<typeof TtReceivingParty.prototype.toObject>;
        purpose?: TxnPurpose;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
        payerAddress?: ReturnType<typeof MttPayerAddress.prototype.toObject>;
        feeMode?: number;
    }): OpenTtRequest {
        const message = new OpenTtRequest({});
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.messageToPayee != null) {
            message.messageToPayee = data.messageToPayee;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.receivingParty != null) {
            message.receivingParty = TtReceivingParty.fromObject(data.receivingParty);
        }
        if (data.purpose != null) {
            message.purpose = data.purpose;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.outOrderNo != null) {
            message.outOrderNo = data.outOrderNo;
        }
        if (data.payerAddress != null) {
            message.payerAddress = MttPayerAddress.fromObject(data.payerAddress);
        }
        if (data.feeMode != null) {
            message.feeMode = data.feeMode;
        }
        return message;
    }
    toObject() {
        const data: {
            currency?: string;
            amount?: number;
            messageToPayee?: string;
            accountId?: string;
            receivingParty?: ReturnType<typeof TtReceivingParty.prototype.toObject>;
            purpose?: TxnPurpose;
            requestId?: string;
            institutionId?: string;
            outOrderNo?: string;
            payerAddress?: ReturnType<typeof MttPayerAddress.prototype.toObject>;
            feeMode?: number;
        } = {};
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.messageToPayee != null) {
            data.messageToPayee = this.messageToPayee;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.receivingParty != null) {
            data.receivingParty = this.receivingParty.toObject();
        }
        if (this.purpose != null) {
            data.purpose = this.purpose;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.outOrderNo != null) {
            data.outOrderNo = this.outOrderNo;
        }
        if (this.payerAddress != null) {
            data.payerAddress = this.payerAddress.toObject();
        }
        if (this.feeMode != null) {
            data.feeMode = this.feeMode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.currency.length)
            writer.writeString(1, this.currency);
        if (this.amount != 0)
            writer.writeInt64(2, this.amount);
        if (this.messageToPayee.length)
            writer.writeString(3, this.messageToPayee);
        if (this.accountId != "0")
            writer.writeInt64String(4, this.accountId);
        if (this.has_receivingParty)
            writer.writeMessage(5, this.receivingParty, () => this.receivingParty.serialize(writer));
        if (this.purpose != TxnPurpose._UNKNOWN_TP)
            writer.writeEnum(6, this.purpose);
        if (this.requestId.length)
            writer.writeString(7, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(8, this.institutionId);
        if (this.outOrderNo.length)
            writer.writeString(9, this.outOrderNo);
        if (this.has_payerAddress)
            writer.writeMessage(10, this.payerAddress, () => this.payerAddress.serialize(writer));
        if (this.feeMode != 0)
            writer.writeInt32(11, this.feeMode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenTtRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenTtRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currency = reader.readString();
                    break;
                case 2:
                    message.amount = reader.readInt64();
                    break;
                case 3:
                    message.messageToPayee = reader.readString();
                    break;
                case 4:
                    message.accountId = reader.readInt64String();
                    break;
                case 5:
                    reader.readMessage(message.receivingParty, () => message.receivingParty = TtReceivingParty.deserialize(reader));
                    break;
                case 6:
                    message.purpose = reader.readEnum();
                    break;
                case 7:
                    message.requestId = reader.readString();
                    break;
                case 8:
                    message.institutionId = reader.readInt64String();
                    break;
                case 9:
                    message.outOrderNo = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.payerAddress, () => message.payerAddress = MttPayerAddress.deserialize(reader));
                    break;
                case 11:
                    message.feeMode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenTtRequest {
        return OpenTtRequest.deserialize(bytes);
    }
}
export class OpenChatsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        currency?: string;
        amount?: number;
        messageToPayee?: string;
        accountId?: number;
        receivingParty?: ChatsReceivingParty;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
        purpose?: TxnPurpose;
        payerAddress?: McpPayerAddress;
        feeMode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("messageToPayee" in data && data.messageToPayee != undefined) {
                this.messageToPayee = data.messageToPayee;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("receivingParty" in data && data.receivingParty != undefined) {
                this.receivingParty = data.receivingParty;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("outOrderNo" in data && data.outOrderNo != undefined) {
                this.outOrderNo = data.outOrderNo;
            }
            if ("purpose" in data && data.purpose != undefined) {
                this.purpose = data.purpose;
            }
            if ("payerAddress" in data && data.payerAddress != undefined) {
                this.payerAddress = data.payerAddress;
            }
            if ("feeMode" in data && data.feeMode != undefined) {
                this.feeMode = data.feeMode;
            }
        }
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get messageToPayee() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set messageToPayee(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set accountId(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get receivingParty() {
        return pb_1.Message.getWrapperField(this, ChatsReceivingParty, 5) as ChatsReceivingParty;
    }
    set receivingParty(value: ChatsReceivingParty) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_receivingParty() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get outOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set outOrderNo(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get purpose() {
        return pb_1.Message.getFieldWithDefault(this, 9, TxnPurpose._UNKNOWN_TP) as TxnPurpose;
    }
    set purpose(value: TxnPurpose) {
        pb_1.Message.setField(this, 9, value);
    }
    get payerAddress() {
        return pb_1.Message.getWrapperField(this, McpPayerAddress, 10) as McpPayerAddress;
    }
    set payerAddress(value: McpPayerAddress) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_payerAddress() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get feeMode() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set feeMode(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        currency?: string;
        amount?: number;
        messageToPayee?: string;
        accountId?: number;
        receivingParty?: ReturnType<typeof ChatsReceivingParty.prototype.toObject>;
        requestId?: string;
        institutionId?: string;
        outOrderNo?: string;
        purpose?: TxnPurpose;
        payerAddress?: ReturnType<typeof McpPayerAddress.prototype.toObject>;
        feeMode?: number;
    }): OpenChatsRequest {
        const message = new OpenChatsRequest({});
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.messageToPayee != null) {
            message.messageToPayee = data.messageToPayee;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.receivingParty != null) {
            message.receivingParty = ChatsReceivingParty.fromObject(data.receivingParty);
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.outOrderNo != null) {
            message.outOrderNo = data.outOrderNo;
        }
        if (data.purpose != null) {
            message.purpose = data.purpose;
        }
        if (data.payerAddress != null) {
            message.payerAddress = McpPayerAddress.fromObject(data.payerAddress);
        }
        if (data.feeMode != null) {
            message.feeMode = data.feeMode;
        }
        return message;
    }
    toObject() {
        const data: {
            currency?: string;
            amount?: number;
            messageToPayee?: string;
            accountId?: number;
            receivingParty?: ReturnType<typeof ChatsReceivingParty.prototype.toObject>;
            requestId?: string;
            institutionId?: string;
            outOrderNo?: string;
            purpose?: TxnPurpose;
            payerAddress?: ReturnType<typeof McpPayerAddress.prototype.toObject>;
            feeMode?: number;
        } = {};
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.messageToPayee != null) {
            data.messageToPayee = this.messageToPayee;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.receivingParty != null) {
            data.receivingParty = this.receivingParty.toObject();
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.outOrderNo != null) {
            data.outOrderNo = this.outOrderNo;
        }
        if (this.purpose != null) {
            data.purpose = this.purpose;
        }
        if (this.payerAddress != null) {
            data.payerAddress = this.payerAddress.toObject();
        }
        if (this.feeMode != null) {
            data.feeMode = this.feeMode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.currency.length)
            writer.writeString(1, this.currency);
        if (this.amount != 0)
            writer.writeInt64(2, this.amount);
        if (this.messageToPayee.length)
            writer.writeString(3, this.messageToPayee);
        if (this.accountId != 0)
            writer.writeInt64(4, this.accountId);
        if (this.has_receivingParty)
            writer.writeMessage(5, this.receivingParty, () => this.receivingParty.serialize(writer));
        if (this.requestId.length)
            writer.writeString(6, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(7, this.institutionId);
        if (this.outOrderNo.length)
            writer.writeString(8, this.outOrderNo);
        if (this.purpose != TxnPurpose._UNKNOWN_TP)
            writer.writeEnum(9, this.purpose);
        if (this.has_payerAddress)
            writer.writeMessage(10, this.payerAddress, () => this.payerAddress.serialize(writer));
        if (this.feeMode != 0)
            writer.writeInt32(11, this.feeMode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenChatsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenChatsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currency = reader.readString();
                    break;
                case 2:
                    message.amount = reader.readInt64();
                    break;
                case 3:
                    message.messageToPayee = reader.readString();
                    break;
                case 4:
                    message.accountId = reader.readInt64();
                    break;
                case 5:
                    reader.readMessage(message.receivingParty, () => message.receivingParty = ChatsReceivingParty.deserialize(reader));
                    break;
                case 6:
                    message.requestId = reader.readString();
                    break;
                case 7:
                    message.institutionId = reader.readInt64String();
                    break;
                case 8:
                    message.outOrderNo = reader.readString();
                    break;
                case 9:
                    message.purpose = reader.readEnum();
                    break;
                case 10:
                    reader.readMessage(message.payerAddress, () => message.payerAddress = McpPayerAddress.deserialize(reader));
                    break;
                case 11:
                    message.feeMode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenChatsRequest {
        return OpenChatsRequest.deserialize(bytes);
    }
}
export class McpPayerAddress extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        address?: string;
        countryRegion?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("countryRegion" in data && data.countryRegion != undefined) {
                this.countryRegion = data.countryRegion;
            }
        }
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set address(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get countryRegion() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set countryRegion(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        address?: string;
        countryRegion?: string;
    }): McpPayerAddress {
        const message = new McpPayerAddress({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.countryRegion != null) {
            message.countryRegion = data.countryRegion;
        }
        return message;
    }
    toObject() {
        const data: {
            address?: string;
            countryRegion?: string;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.countryRegion != null) {
            data.countryRegion = this.countryRegion;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address.length)
            writer.writeString(1, this.address);
        if (this.countryRegion.length)
            writer.writeString(2, this.countryRegion);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): McpPayerAddress {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new McpPayerAddress();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readString();
                    break;
                case 2:
                    message.countryRegion = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): McpPayerAddress {
        return McpPayerAddress.deserialize(bytes);
    }
}
export class MttPayerAddress extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        address?: string;
        countryRegion?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("countryRegion" in data && data.countryRegion != undefined) {
                this.countryRegion = data.countryRegion;
            }
        }
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set address(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get countryRegion() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set countryRegion(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        address?: string;
        countryRegion?: string;
    }): MttPayerAddress {
        const message = new MttPayerAddress({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.countryRegion != null) {
            message.countryRegion = data.countryRegion;
        }
        return message;
    }
    toObject() {
        const data: {
            address?: string;
            countryRegion?: string;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.countryRegion != null) {
            data.countryRegion = this.countryRegion;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address.length)
            writer.writeString(1, this.address);
        if (this.countryRegion.length)
            writer.writeString(2, this.countryRegion);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MttPayerAddress {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MttPayerAddress();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readString();
                    break;
                case 2:
                    message.countryRegion = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MttPayerAddress {
        return MttPayerAddress.deserialize(bytes);
    }
}
export class FpsReceivingParty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        bankId?: string;
        accountName?: string;
        proxyValue?: string;
        proxyType?: TxnProxyType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bankId" in data && data.bankId != undefined) {
                this.bankId = data.bankId;
            }
            if ("accountName" in data && data.accountName != undefined) {
                this.accountName = data.accountName;
            }
            if ("proxyValue" in data && data.proxyValue != undefined) {
                this.proxyValue = data.proxyValue;
            }
            if ("proxyType" in data && data.proxyType != undefined) {
                this.proxyType = data.proxyType;
            }
        }
    }
    get bankId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set bankId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set accountName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get proxyValue() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set proxyValue(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get proxyType() {
        return pb_1.Message.getFieldWithDefault(this, 4, TxnProxyType._UNKNOWN_TYPE) as TxnProxyType;
    }
    set proxyType(value: TxnProxyType) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        bankId?: string;
        accountName?: string;
        proxyValue?: string;
        proxyType?: TxnProxyType;
    }): FpsReceivingParty {
        const message = new FpsReceivingParty({});
        if (data.bankId != null) {
            message.bankId = data.bankId;
        }
        if (data.accountName != null) {
            message.accountName = data.accountName;
        }
        if (data.proxyValue != null) {
            message.proxyValue = data.proxyValue;
        }
        if (data.proxyType != null) {
            message.proxyType = data.proxyType;
        }
        return message;
    }
    toObject() {
        const data: {
            bankId?: string;
            accountName?: string;
            proxyValue?: string;
            proxyType?: TxnProxyType;
        } = {};
        if (this.bankId != null) {
            data.bankId = this.bankId;
        }
        if (this.accountName != null) {
            data.accountName = this.accountName;
        }
        if (this.proxyValue != null) {
            data.proxyValue = this.proxyValue;
        }
        if (this.proxyType != null) {
            data.proxyType = this.proxyType;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.bankId.length)
            writer.writeString(1, this.bankId);
        if (this.accountName.length)
            writer.writeString(2, this.accountName);
        if (this.proxyValue.length)
            writer.writeString(3, this.proxyValue);
        if (this.proxyType != TxnProxyType._UNKNOWN_TYPE)
            writer.writeEnum(4, this.proxyType);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FpsReceivingParty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FpsReceivingParty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.bankId = reader.readString();
                    break;
                case 2:
                    message.accountName = reader.readString();
                    break;
                case 3:
                    message.proxyValue = reader.readString();
                    break;
                case 4:
                    message.proxyType = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FpsReceivingParty {
        return FpsReceivingParty.deserialize(bytes);
    }
}
export class OpenBalanceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        requestId?: string;
        institutionId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        accountId?: string;
        requestId?: string;
        institutionId?: string;
    }): OpenBalanceRequest {
        const message = new OpenBalanceRequest({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            requestId?: string;
            institutionId?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.requestId.length)
            writer.writeString(2, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(3, this.institutionId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenBalanceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenBalanceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.requestId = reader.readString();
                    break;
                case 3:
                    message.institutionId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenBalanceRequest {
        return OpenBalanceRequest.deserialize(bytes);
    }
}
export class OpenOrderDetailRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        orderNo?: string;
        outOrderNo?: string;
        requestId?: string;
        institutionId?: string;
        accountId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("outOrderNo" in data && data.outOrderNo != undefined) {
                this.outOrderNo = data.outOrderNo;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
        }
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get outOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set outOrderNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        orderNo?: string;
        outOrderNo?: string;
        requestId?: string;
        institutionId?: string;
        accountId?: string;
    }): OpenOrderDetailRequest {
        const message = new OpenOrderDetailRequest({});
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.outOrderNo != null) {
            message.outOrderNo = data.outOrderNo;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        return message;
    }
    toObject() {
        const data: {
            orderNo?: string;
            outOrderNo?: string;
            requestId?: string;
            institutionId?: string;
            accountId?: string;
        } = {};
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.outOrderNo != null) {
            data.outOrderNo = this.outOrderNo;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.orderNo.length)
            writer.writeString(1, this.orderNo);
        if (this.outOrderNo.length)
            writer.writeString(2, this.outOrderNo);
        if (this.requestId.length)
            writer.writeString(3, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(4, this.institutionId);
        if (this.accountId != "0")
            writer.writeInt64String(5, this.accountId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenOrderDetailRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenOrderDetailRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.orderNo = reader.readString();
                    break;
                case 2:
                    message.outOrderNo = reader.readString();
                    break;
                case 3:
                    message.requestId = reader.readString();
                    break;
                case 4:
                    message.institutionId = reader.readInt64String();
                    break;
                case 5:
                    message.accountId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenOrderDetailRequest {
        return OpenOrderDetailRequest.deserialize(bytes);
    }
}
export class OpenBalanceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: OpenBalanceData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, OpenBalanceData, 3) as OpenBalanceData;
    }
    set data(value: OpenBalanceData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof OpenBalanceData.prototype.toObject>;
    }): OpenBalanceResponse {
        const message = new OpenBalanceResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = OpenBalanceData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof OpenBalanceData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenBalanceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenBalanceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = OpenBalanceData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenBalanceResponse {
        return OpenBalanceResponse.deserialize(bytes);
    }
}
export class OpenOrderDetailResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: OrderDetailData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, OrderDetailData, 3) as OrderDetailData;
    }
    set data(value: OrderDetailData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof OrderDetailData.prototype.toObject>;
    }): OpenOrderDetailResponse {
        const message = new OpenOrderDetailResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = OrderDetailData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof OrderDetailData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenOrderDetailResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenOrderDetailResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = OrderDetailData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenOrderDetailResponse {
        return OpenOrderDetailResponse.deserialize(bytes);
    }
}
export class OpenPayoutResultRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: OrderDetailData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, OrderDetailData, 3) as OrderDetailData;
    }
    set data(value: OrderDetailData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof OrderDetailData.prototype.toObject>;
    }): OpenPayoutResultRequest {
        const message = new OpenPayoutResultRequest({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = OrderDetailData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof OrderDetailData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenPayoutResultRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenPayoutResultRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = OrderDetailData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenPayoutResultRequest {
        return OpenPayoutResultRequest.deserialize(bytes);
    }
}
export class OrderDetailData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        orderNo?: string;
        outOrderNo?: string;
        productCode?: string;
        orderStatus?: OpenOrderStatus;
        orderAmount?: number;
        feeAmount?: number;
        currency?: string;
        feeCurrency?: string;
        messageToPayee?: string;
        payerBankId?: string;
        payeeBankId?: string;
        payeeBankName?: string;
        payerAccountName?: string;
        payerAccountNumber?: string;
        payeeAccountName?: string;
        payeeAccountNumber?: string;
        payerSwiftCode?: string;
        payeeSwiftCode?: string;
        payeeIntermediarySwiftCode?: string;
        routingCode?: string;
        proxyType?: TxnProxyType;
        proxyValue?: string;
        createTime?: string;
        refundTime?: string;
        finishTime?: string;
        payerBankName?: string;
        feeMode?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("outOrderNo" in data && data.outOrderNo != undefined) {
                this.outOrderNo = data.outOrderNo;
            }
            if ("productCode" in data && data.productCode != undefined) {
                this.productCode = data.productCode;
            }
            if ("orderStatus" in data && data.orderStatus != undefined) {
                this.orderStatus = data.orderStatus;
            }
            if ("orderAmount" in data && data.orderAmount != undefined) {
                this.orderAmount = data.orderAmount;
            }
            if ("feeAmount" in data && data.feeAmount != undefined) {
                this.feeAmount = data.feeAmount;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("feeCurrency" in data && data.feeCurrency != undefined) {
                this.feeCurrency = data.feeCurrency;
            }
            if ("messageToPayee" in data && data.messageToPayee != undefined) {
                this.messageToPayee = data.messageToPayee;
            }
            if ("payerBankId" in data && data.payerBankId != undefined) {
                this.payerBankId = data.payerBankId;
            }
            if ("payeeBankId" in data && data.payeeBankId != undefined) {
                this.payeeBankId = data.payeeBankId;
            }
            if ("payeeBankName" in data && data.payeeBankName != undefined) {
                this.payeeBankName = data.payeeBankName;
            }
            if ("payerAccountName" in data && data.payerAccountName != undefined) {
                this.payerAccountName = data.payerAccountName;
            }
            if ("payerAccountNumber" in data && data.payerAccountNumber != undefined) {
                this.payerAccountNumber = data.payerAccountNumber;
            }
            if ("payeeAccountName" in data && data.payeeAccountName != undefined) {
                this.payeeAccountName = data.payeeAccountName;
            }
            if ("payeeAccountNumber" in data && data.payeeAccountNumber != undefined) {
                this.payeeAccountNumber = data.payeeAccountNumber;
            }
            if ("payerSwiftCode" in data && data.payerSwiftCode != undefined) {
                this.payerSwiftCode = data.payerSwiftCode;
            }
            if ("payeeSwiftCode" in data && data.payeeSwiftCode != undefined) {
                this.payeeSwiftCode = data.payeeSwiftCode;
            }
            if ("payeeIntermediarySwiftCode" in data && data.payeeIntermediarySwiftCode != undefined) {
                this.payeeIntermediarySwiftCode = data.payeeIntermediarySwiftCode;
            }
            if ("routingCode" in data && data.routingCode != undefined) {
                this.routingCode = data.routingCode;
            }
            if ("proxyType" in data && data.proxyType != undefined) {
                this.proxyType = data.proxyType;
            }
            if ("proxyValue" in data && data.proxyValue != undefined) {
                this.proxyValue = data.proxyValue;
            }
            if ("createTime" in data && data.createTime != undefined) {
                this.createTime = data.createTime;
            }
            if ("refundTime" in data && data.refundTime != undefined) {
                this.refundTime = data.refundTime;
            }
            if ("finishTime" in data && data.finishTime != undefined) {
                this.finishTime = data.finishTime;
            }
            if ("payerBankName" in data && data.payerBankName != undefined) {
                this.payerBankName = data.payerBankName;
            }
            if ("feeMode" in data && data.feeMode != undefined) {
                this.feeMode = data.feeMode;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get outOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set outOrderNo(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get productCode() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set productCode(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get orderStatus() {
        return pb_1.Message.getFieldWithDefault(this, 5, OpenOrderStatus._UNKNOWN_OPS) as OpenOrderStatus;
    }
    set orderStatus(value: OpenOrderStatus) {
        pb_1.Message.setField(this, 5, value);
    }
    get orderAmount() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set orderAmount(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get feeAmount() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set feeAmount(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get feeCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set feeCurrency(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get messageToPayee() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set messageToPayee(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get payerBankId() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set payerBankId(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get payeeBankId() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set payeeBankId(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get payeeBankName() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set payeeBankName(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get payerAccountName() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set payerAccountName(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get payerAccountNumber() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set payerAccountNumber(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get payeeAccountName() {
        return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
    }
    set payeeAccountName(value: string) {
        pb_1.Message.setField(this, 16, value);
    }
    get payeeAccountNumber() {
        return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
    }
    set payeeAccountNumber(value: string) {
        pb_1.Message.setField(this, 17, value);
    }
    get payerSwiftCode() {
        return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
    }
    set payerSwiftCode(value: string) {
        pb_1.Message.setField(this, 18, value);
    }
    get payeeSwiftCode() {
        return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
    }
    set payeeSwiftCode(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get payeeIntermediarySwiftCode() {
        return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
    }
    set payeeIntermediarySwiftCode(value: string) {
        pb_1.Message.setField(this, 20, value);
    }
    get routingCode() {
        return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
    }
    set routingCode(value: string) {
        pb_1.Message.setField(this, 21, value);
    }
    get proxyType() {
        return pb_1.Message.getFieldWithDefault(this, 22, TxnProxyType._UNKNOWN_TYPE) as TxnProxyType;
    }
    set proxyType(value: TxnProxyType) {
        pb_1.Message.setField(this, 22, value);
    }
    get proxyValue() {
        return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
    }
    set proxyValue(value: string) {
        pb_1.Message.setField(this, 23, value);
    }
    get createTime() {
        return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
    }
    set createTime(value: string) {
        pb_1.Message.setField(this, 24, value);
    }
    get refundTime() {
        return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
    }
    set refundTime(value: string) {
        pb_1.Message.setField(this, 25, value);
    }
    get finishTime() {
        return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
    }
    set finishTime(value: string) {
        pb_1.Message.setField(this, 26, value);
    }
    get payerBankName() {
        return pb_1.Message.getFieldWithDefault(this, 27, "") as string;
    }
    set payerBankName(value: string) {
        pb_1.Message.setField(this, 27, value);
    }
    get feeMode() {
        return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
    }
    set feeMode(value: string) {
        pb_1.Message.setField(this, 28, value);
    }
    static fromObject(data: {
        accountId?: string;
        orderNo?: string;
        outOrderNo?: string;
        productCode?: string;
        orderStatus?: OpenOrderStatus;
        orderAmount?: number;
        feeAmount?: number;
        currency?: string;
        feeCurrency?: string;
        messageToPayee?: string;
        payerBankId?: string;
        payeeBankId?: string;
        payeeBankName?: string;
        payerAccountName?: string;
        payerAccountNumber?: string;
        payeeAccountName?: string;
        payeeAccountNumber?: string;
        payerSwiftCode?: string;
        payeeSwiftCode?: string;
        payeeIntermediarySwiftCode?: string;
        routingCode?: string;
        proxyType?: TxnProxyType;
        proxyValue?: string;
        createTime?: string;
        refundTime?: string;
        finishTime?: string;
        payerBankName?: string;
        feeMode?: string;
    }): OrderDetailData {
        const message = new OrderDetailData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.outOrderNo != null) {
            message.outOrderNo = data.outOrderNo;
        }
        if (data.productCode != null) {
            message.productCode = data.productCode;
        }
        if (data.orderStatus != null) {
            message.orderStatus = data.orderStatus;
        }
        if (data.orderAmount != null) {
            message.orderAmount = data.orderAmount;
        }
        if (data.feeAmount != null) {
            message.feeAmount = data.feeAmount;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.feeCurrency != null) {
            message.feeCurrency = data.feeCurrency;
        }
        if (data.messageToPayee != null) {
            message.messageToPayee = data.messageToPayee;
        }
        if (data.payerBankId != null) {
            message.payerBankId = data.payerBankId;
        }
        if (data.payeeBankId != null) {
            message.payeeBankId = data.payeeBankId;
        }
        if (data.payeeBankName != null) {
            message.payeeBankName = data.payeeBankName;
        }
        if (data.payerAccountName != null) {
            message.payerAccountName = data.payerAccountName;
        }
        if (data.payerAccountNumber != null) {
            message.payerAccountNumber = data.payerAccountNumber;
        }
        if (data.payeeAccountName != null) {
            message.payeeAccountName = data.payeeAccountName;
        }
        if (data.payeeAccountNumber != null) {
            message.payeeAccountNumber = data.payeeAccountNumber;
        }
        if (data.payerSwiftCode != null) {
            message.payerSwiftCode = data.payerSwiftCode;
        }
        if (data.payeeSwiftCode != null) {
            message.payeeSwiftCode = data.payeeSwiftCode;
        }
        if (data.payeeIntermediarySwiftCode != null) {
            message.payeeIntermediarySwiftCode = data.payeeIntermediarySwiftCode;
        }
        if (data.routingCode != null) {
            message.routingCode = data.routingCode;
        }
        if (data.proxyType != null) {
            message.proxyType = data.proxyType;
        }
        if (data.proxyValue != null) {
            message.proxyValue = data.proxyValue;
        }
        if (data.createTime != null) {
            message.createTime = data.createTime;
        }
        if (data.refundTime != null) {
            message.refundTime = data.refundTime;
        }
        if (data.finishTime != null) {
            message.finishTime = data.finishTime;
        }
        if (data.payerBankName != null) {
            message.payerBankName = data.payerBankName;
        }
        if (data.feeMode != null) {
            message.feeMode = data.feeMode;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            orderNo?: string;
            outOrderNo?: string;
            productCode?: string;
            orderStatus?: OpenOrderStatus;
            orderAmount?: number;
            feeAmount?: number;
            currency?: string;
            feeCurrency?: string;
            messageToPayee?: string;
            payerBankId?: string;
            payeeBankId?: string;
            payeeBankName?: string;
            payerAccountName?: string;
            payerAccountNumber?: string;
            payeeAccountName?: string;
            payeeAccountNumber?: string;
            payerSwiftCode?: string;
            payeeSwiftCode?: string;
            payeeIntermediarySwiftCode?: string;
            routingCode?: string;
            proxyType?: TxnProxyType;
            proxyValue?: string;
            createTime?: string;
            refundTime?: string;
            finishTime?: string;
            payerBankName?: string;
            feeMode?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.outOrderNo != null) {
            data.outOrderNo = this.outOrderNo;
        }
        if (this.productCode != null) {
            data.productCode = this.productCode;
        }
        if (this.orderStatus != null) {
            data.orderStatus = this.orderStatus;
        }
        if (this.orderAmount != null) {
            data.orderAmount = this.orderAmount;
        }
        if (this.feeAmount != null) {
            data.feeAmount = this.feeAmount;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.feeCurrency != null) {
            data.feeCurrency = this.feeCurrency;
        }
        if (this.messageToPayee != null) {
            data.messageToPayee = this.messageToPayee;
        }
        if (this.payerBankId != null) {
            data.payerBankId = this.payerBankId;
        }
        if (this.payeeBankId != null) {
            data.payeeBankId = this.payeeBankId;
        }
        if (this.payeeBankName != null) {
            data.payeeBankName = this.payeeBankName;
        }
        if (this.payerAccountName != null) {
            data.payerAccountName = this.payerAccountName;
        }
        if (this.payerAccountNumber != null) {
            data.payerAccountNumber = this.payerAccountNumber;
        }
        if (this.payeeAccountName != null) {
            data.payeeAccountName = this.payeeAccountName;
        }
        if (this.payeeAccountNumber != null) {
            data.payeeAccountNumber = this.payeeAccountNumber;
        }
        if (this.payerSwiftCode != null) {
            data.payerSwiftCode = this.payerSwiftCode;
        }
        if (this.payeeSwiftCode != null) {
            data.payeeSwiftCode = this.payeeSwiftCode;
        }
        if (this.payeeIntermediarySwiftCode != null) {
            data.payeeIntermediarySwiftCode = this.payeeIntermediarySwiftCode;
        }
        if (this.routingCode != null) {
            data.routingCode = this.routingCode;
        }
        if (this.proxyType != null) {
            data.proxyType = this.proxyType;
        }
        if (this.proxyValue != null) {
            data.proxyValue = this.proxyValue;
        }
        if (this.createTime != null) {
            data.createTime = this.createTime;
        }
        if (this.refundTime != null) {
            data.refundTime = this.refundTime;
        }
        if (this.finishTime != null) {
            data.finishTime = this.finishTime;
        }
        if (this.payerBankName != null) {
            data.payerBankName = this.payerBankName;
        }
        if (this.feeMode != null) {
            data.feeMode = this.feeMode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.orderNo.length)
            writer.writeString(2, this.orderNo);
        if (this.outOrderNo.length)
            writer.writeString(3, this.outOrderNo);
        if (this.productCode.length)
            writer.writeString(4, this.productCode);
        if (this.orderStatus != OpenOrderStatus._UNKNOWN_OPS)
            writer.writeEnum(5, this.orderStatus);
        if (this.orderAmount != 0)
            writer.writeInt64(6, this.orderAmount);
        if (this.feeAmount != 0)
            writer.writeInt64(7, this.feeAmount);
        if (this.currency.length)
            writer.writeString(8, this.currency);
        if (this.feeCurrency.length)
            writer.writeString(9, this.feeCurrency);
        if (this.messageToPayee.length)
            writer.writeString(10, this.messageToPayee);
        if (this.payerBankId.length)
            writer.writeString(11, this.payerBankId);
        if (this.payeeBankId.length)
            writer.writeString(12, this.payeeBankId);
        if (this.payeeBankName.length)
            writer.writeString(13, this.payeeBankName);
        if (this.payerAccountName.length)
            writer.writeString(14, this.payerAccountName);
        if (this.payerAccountNumber.length)
            writer.writeString(15, this.payerAccountNumber);
        if (this.payeeAccountName.length)
            writer.writeString(16, this.payeeAccountName);
        if (this.payeeAccountNumber.length)
            writer.writeString(17, this.payeeAccountNumber);
        if (this.payerSwiftCode.length)
            writer.writeString(18, this.payerSwiftCode);
        if (this.payeeSwiftCode.length)
            writer.writeString(19, this.payeeSwiftCode);
        if (this.payeeIntermediarySwiftCode.length)
            writer.writeString(20, this.payeeIntermediarySwiftCode);
        if (this.routingCode.length)
            writer.writeString(21, this.routingCode);
        if (this.proxyType != TxnProxyType._UNKNOWN_TYPE)
            writer.writeEnum(22, this.proxyType);
        if (this.proxyValue.length)
            writer.writeString(23, this.proxyValue);
        if (this.createTime.length)
            writer.writeString(24, this.createTime);
        if (this.refundTime.length)
            writer.writeString(25, this.refundTime);
        if (this.finishTime.length)
            writer.writeString(26, this.finishTime);
        if (this.payerBankName.length)
            writer.writeString(27, this.payerBankName);
        if (this.feeMode.length)
            writer.writeString(28, this.feeMode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderDetailData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderDetailData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.orderNo = reader.readString();
                    break;
                case 3:
                    message.outOrderNo = reader.readString();
                    break;
                case 4:
                    message.productCode = reader.readString();
                    break;
                case 5:
                    message.orderStatus = reader.readEnum();
                    break;
                case 6:
                    message.orderAmount = reader.readInt64();
                    break;
                case 7:
                    message.feeAmount = reader.readInt64();
                    break;
                case 8:
                    message.currency = reader.readString();
                    break;
                case 9:
                    message.feeCurrency = reader.readString();
                    break;
                case 10:
                    message.messageToPayee = reader.readString();
                    break;
                case 11:
                    message.payerBankId = reader.readString();
                    break;
                case 12:
                    message.payeeBankId = reader.readString();
                    break;
                case 13:
                    message.payeeBankName = reader.readString();
                    break;
                case 14:
                    message.payerAccountName = reader.readString();
                    break;
                case 15:
                    message.payerAccountNumber = reader.readString();
                    break;
                case 16:
                    message.payeeAccountName = reader.readString();
                    break;
                case 17:
                    message.payeeAccountNumber = reader.readString();
                    break;
                case 18:
                    message.payerSwiftCode = reader.readString();
                    break;
                case 19:
                    message.payeeSwiftCode = reader.readString();
                    break;
                case 20:
                    message.payeeIntermediarySwiftCode = reader.readString();
                    break;
                case 21:
                    message.routingCode = reader.readString();
                    break;
                case 22:
                    message.proxyType = reader.readEnum();
                    break;
                case 23:
                    message.proxyValue = reader.readString();
                    break;
                case 24:
                    message.createTime = reader.readString();
                    break;
                case 25:
                    message.refundTime = reader.readString();
                    break;
                case 26:
                    message.finishTime = reader.readString();
                    break;
                case 27:
                    message.payerBankName = reader.readString();
                    break;
                case 28:
                    message.feeMode = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrderDetailData {
        return OrderDetailData.deserialize(bytes);
    }
}
export class OpenBalanceData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        accountName?: string;
        subAccountList?: OpenSubAccountData[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("accountName" in data && data.accountName != undefined) {
                this.accountName = data.accountName;
            }
            if ("subAccountList" in data && data.subAccountList != undefined) {
                this.subAccountList = data.subAccountList;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set accountName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get subAccountList() {
        return pb_1.Message.getRepeatedWrapperField(this, OpenSubAccountData, 3) as OpenSubAccountData[];
    }
    set subAccountList(value: OpenSubAccountData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        accountId?: string;
        accountName?: string;
        subAccountList?: ReturnType<typeof OpenSubAccountData.prototype.toObject>[];
    }): OpenBalanceData {
        const message = new OpenBalanceData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.accountName != null) {
            message.accountName = data.accountName;
        }
        if (data.subAccountList != null) {
            message.subAccountList = data.subAccountList.map(item => OpenSubAccountData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            accountName?: string;
            subAccountList?: ReturnType<typeof OpenSubAccountData.prototype.toObject>[];
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.accountName != null) {
            data.accountName = this.accountName;
        }
        if (this.subAccountList != null) {
            data.subAccountList = this.subAccountList.map((item: OpenSubAccountData) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.accountName.length)
            writer.writeString(2, this.accountName);
        if (this.subAccountList.length)
            writer.writeRepeatedMessage(3, this.subAccountList, (item: OpenSubAccountData) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenBalanceData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenBalanceData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.accountName = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.subAccountList, () => pb_1.Message.addToRepeatedWrapperField(message, 3, OpenSubAccountData.deserialize(reader), OpenSubAccountData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenBalanceData {
        return OpenBalanceData.deserialize(bytes);
    }
}
export class OpenSubAccountData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        currency?: string;
        ledgerBalance?: number;
        availableBalance?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("ledgerBalance" in data && data.ledgerBalance != undefined) {
                this.ledgerBalance = data.ledgerBalance;
            }
            if ("availableBalance" in data && data.availableBalance != undefined) {
                this.availableBalance = data.availableBalance;
            }
        }
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get ledgerBalance() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set ledgerBalance(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get availableBalance() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set availableBalance(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        currency?: string;
        ledgerBalance?: number;
        availableBalance?: number;
    }): OpenSubAccountData {
        const message = new OpenSubAccountData({});
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.ledgerBalance != null) {
            message.ledgerBalance = data.ledgerBalance;
        }
        if (data.availableBalance != null) {
            message.availableBalance = data.availableBalance;
        }
        return message;
    }
    toObject() {
        const data: {
            currency?: string;
            ledgerBalance?: number;
            availableBalance?: number;
        } = {};
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.ledgerBalance != null) {
            data.ledgerBalance = this.ledgerBalance;
        }
        if (this.availableBalance != null) {
            data.availableBalance = this.availableBalance;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.currency.length)
            writer.writeString(1, this.currency);
        if (this.ledgerBalance != 0)
            writer.writeInt64(2, this.ledgerBalance);
        if (this.availableBalance != 0)
            writer.writeInt64(3, this.availableBalance);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenSubAccountData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenSubAccountData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currency = reader.readString();
                    break;
                case 2:
                    message.ledgerBalance = reader.readInt64();
                    break;
                case 3:
                    message.availableBalance = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenSubAccountData {
        return OpenSubAccountData.deserialize(bytes);
    }
}
export class OpenFundInRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        orderNo?: string;
        productCode?: string;
        orderStatus?: OpenOrderStatus;
        currency?: string;
        orderAmount?: number;
        netAmount?: number;
        feeAmount?: number;
        feeCurrency?: string;
        messageToPayee?: string;
        payerAccountName?: string;
        payerAccountNumber?: string;
        payerBankId?: string;
        payerBankSwiftCode?: string;
        createTime?: string;
        finishTime?: string;
        accountName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("productCode" in data && data.productCode != undefined) {
                this.productCode = data.productCode;
            }
            if ("orderStatus" in data && data.orderStatus != undefined) {
                this.orderStatus = data.orderStatus;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("orderAmount" in data && data.orderAmount != undefined) {
                this.orderAmount = data.orderAmount;
            }
            if ("netAmount" in data && data.netAmount != undefined) {
                this.netAmount = data.netAmount;
            }
            if ("feeAmount" in data && data.feeAmount != undefined) {
                this.feeAmount = data.feeAmount;
            }
            if ("feeCurrency" in data && data.feeCurrency != undefined) {
                this.feeCurrency = data.feeCurrency;
            }
            if ("messageToPayee" in data && data.messageToPayee != undefined) {
                this.messageToPayee = data.messageToPayee;
            }
            if ("payerAccountName" in data && data.payerAccountName != undefined) {
                this.payerAccountName = data.payerAccountName;
            }
            if ("payerAccountNumber" in data && data.payerAccountNumber != undefined) {
                this.payerAccountNumber = data.payerAccountNumber;
            }
            if ("payerBankId" in data && data.payerBankId != undefined) {
                this.payerBankId = data.payerBankId;
            }
            if ("payerBankSwiftCode" in data && data.payerBankSwiftCode != undefined) {
                this.payerBankSwiftCode = data.payerBankSwiftCode;
            }
            if ("createTime" in data && data.createTime != undefined) {
                this.createTime = data.createTime;
            }
            if ("finishTime" in data && data.finishTime != undefined) {
                this.finishTime = data.finishTime;
            }
            if ("accountName" in data && data.accountName != undefined) {
                this.accountName = data.accountName;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get productCode() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set productCode(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get orderStatus() {
        return pb_1.Message.getFieldWithDefault(this, 4, OpenOrderStatus._UNKNOWN_OPS) as OpenOrderStatus;
    }
    set orderStatus(value: OpenOrderStatus) {
        pb_1.Message.setField(this, 4, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get orderAmount() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set orderAmount(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get netAmount() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set netAmount(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get feeAmount() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set feeAmount(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get feeCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set feeCurrency(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get messageToPayee() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set messageToPayee(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get payerAccountName() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set payerAccountName(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get payerAccountNumber() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set payerAccountNumber(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get payerBankId() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set payerBankId(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get payerBankSwiftCode() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set payerBankSwiftCode(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get createTime() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set createTime(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get finishTime() {
        return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
    }
    set finishTime(value: string) {
        pb_1.Message.setField(this, 16, value);
    }
    get accountName() {
        return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
    }
    set accountName(value: string) {
        pb_1.Message.setField(this, 17, value);
    }
    static fromObject(data: {
        accountId?: string;
        orderNo?: string;
        productCode?: string;
        orderStatus?: OpenOrderStatus;
        currency?: string;
        orderAmount?: number;
        netAmount?: number;
        feeAmount?: number;
        feeCurrency?: string;
        messageToPayee?: string;
        payerAccountName?: string;
        payerAccountNumber?: string;
        payerBankId?: string;
        payerBankSwiftCode?: string;
        createTime?: string;
        finishTime?: string;
        accountName?: string;
    }): OpenFundInRequest {
        const message = new OpenFundInRequest({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.productCode != null) {
            message.productCode = data.productCode;
        }
        if (data.orderStatus != null) {
            message.orderStatus = data.orderStatus;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.orderAmount != null) {
            message.orderAmount = data.orderAmount;
        }
        if (data.netAmount != null) {
            message.netAmount = data.netAmount;
        }
        if (data.feeAmount != null) {
            message.feeAmount = data.feeAmount;
        }
        if (data.feeCurrency != null) {
            message.feeCurrency = data.feeCurrency;
        }
        if (data.messageToPayee != null) {
            message.messageToPayee = data.messageToPayee;
        }
        if (data.payerAccountName != null) {
            message.payerAccountName = data.payerAccountName;
        }
        if (data.payerAccountNumber != null) {
            message.payerAccountNumber = data.payerAccountNumber;
        }
        if (data.payerBankId != null) {
            message.payerBankId = data.payerBankId;
        }
        if (data.payerBankSwiftCode != null) {
            message.payerBankSwiftCode = data.payerBankSwiftCode;
        }
        if (data.createTime != null) {
            message.createTime = data.createTime;
        }
        if (data.finishTime != null) {
            message.finishTime = data.finishTime;
        }
        if (data.accountName != null) {
            message.accountName = data.accountName;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            orderNo?: string;
            productCode?: string;
            orderStatus?: OpenOrderStatus;
            currency?: string;
            orderAmount?: number;
            netAmount?: number;
            feeAmount?: number;
            feeCurrency?: string;
            messageToPayee?: string;
            payerAccountName?: string;
            payerAccountNumber?: string;
            payerBankId?: string;
            payerBankSwiftCode?: string;
            createTime?: string;
            finishTime?: string;
            accountName?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.productCode != null) {
            data.productCode = this.productCode;
        }
        if (this.orderStatus != null) {
            data.orderStatus = this.orderStatus;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.orderAmount != null) {
            data.orderAmount = this.orderAmount;
        }
        if (this.netAmount != null) {
            data.netAmount = this.netAmount;
        }
        if (this.feeAmount != null) {
            data.feeAmount = this.feeAmount;
        }
        if (this.feeCurrency != null) {
            data.feeCurrency = this.feeCurrency;
        }
        if (this.messageToPayee != null) {
            data.messageToPayee = this.messageToPayee;
        }
        if (this.payerAccountName != null) {
            data.payerAccountName = this.payerAccountName;
        }
        if (this.payerAccountNumber != null) {
            data.payerAccountNumber = this.payerAccountNumber;
        }
        if (this.payerBankId != null) {
            data.payerBankId = this.payerBankId;
        }
        if (this.payerBankSwiftCode != null) {
            data.payerBankSwiftCode = this.payerBankSwiftCode;
        }
        if (this.createTime != null) {
            data.createTime = this.createTime;
        }
        if (this.finishTime != null) {
            data.finishTime = this.finishTime;
        }
        if (this.accountName != null) {
            data.accountName = this.accountName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.orderNo.length)
            writer.writeString(2, this.orderNo);
        if (this.productCode.length)
            writer.writeString(3, this.productCode);
        if (this.orderStatus != OpenOrderStatus._UNKNOWN_OPS)
            writer.writeEnum(4, this.orderStatus);
        if (this.currency.length)
            writer.writeString(5, this.currency);
        if (this.orderAmount != 0)
            writer.writeInt64(6, this.orderAmount);
        if (this.netAmount != 0)
            writer.writeInt64(7, this.netAmount);
        if (this.feeAmount != 0)
            writer.writeInt64(8, this.feeAmount);
        if (this.feeCurrency.length)
            writer.writeString(9, this.feeCurrency);
        if (this.messageToPayee.length)
            writer.writeString(10, this.messageToPayee);
        if (this.payerAccountName.length)
            writer.writeString(11, this.payerAccountName);
        if (this.payerAccountNumber.length)
            writer.writeString(12, this.payerAccountNumber);
        if (this.payerBankId.length)
            writer.writeString(13, this.payerBankId);
        if (this.payerBankSwiftCode.length)
            writer.writeString(14, this.payerBankSwiftCode);
        if (this.createTime.length)
            writer.writeString(15, this.createTime);
        if (this.finishTime.length)
            writer.writeString(16, this.finishTime);
        if (this.accountName.length)
            writer.writeString(17, this.accountName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenFundInRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenFundInRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.orderNo = reader.readString();
                    break;
                case 3:
                    message.productCode = reader.readString();
                    break;
                case 4:
                    message.orderStatus = reader.readEnum();
                    break;
                case 5:
                    message.currency = reader.readString();
                    break;
                case 6:
                    message.orderAmount = reader.readInt64();
                    break;
                case 7:
                    message.netAmount = reader.readInt64();
                    break;
                case 8:
                    message.feeAmount = reader.readInt64();
                    break;
                case 9:
                    message.feeCurrency = reader.readString();
                    break;
                case 10:
                    message.messageToPayee = reader.readString();
                    break;
                case 11:
                    message.payerAccountName = reader.readString();
                    break;
                case 12:
                    message.payerAccountNumber = reader.readString();
                    break;
                case 13:
                    message.payerBankId = reader.readString();
                    break;
                case 14:
                    message.payerBankSwiftCode = reader.readString();
                    break;
                case 15:
                    message.createTime = reader.readString();
                    break;
                case 16:
                    message.finishTime = reader.readString();
                    break;
                case 17:
                    message.accountName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenFundInRequest {
        return OpenFundInRequest.deserialize(bytes);
    }
}
export class OpenRefundRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: OpenRefundDetail;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, OpenRefundDetail, 3) as OpenRefundDetail;
    }
    set data(value: OpenRefundDetail) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof OpenRefundDetail.prototype.toObject>;
    }): OpenRefundRequest {
        const message = new OpenRefundRequest({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = OpenRefundDetail.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof OpenRefundDetail.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenRefundRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenRefundRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = OpenRefundDetail.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenRefundRequest {
        return OpenRefundRequest.deserialize(bytes);
    }
}
export class OpenRefundDetail extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        outOrderNo?: string;
        accountId?: string;
        orderNo?: string;
        productCode?: string;
        orderStatus?: OpenOrderStatus;
        currency?: string;
        orderAmount?: number;
        feeAmount?: number;
        feeCurrency?: string;
        refundAmount?: number;
        refundCurrency?: string;
        refundTime?: string;
        refundReason?: string;
        refundOrderNo?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("outOrderNo" in data && data.outOrderNo != undefined) {
                this.outOrderNo = data.outOrderNo;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("productCode" in data && data.productCode != undefined) {
                this.productCode = data.productCode;
            }
            if ("orderStatus" in data && data.orderStatus != undefined) {
                this.orderStatus = data.orderStatus;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("orderAmount" in data && data.orderAmount != undefined) {
                this.orderAmount = data.orderAmount;
            }
            if ("feeAmount" in data && data.feeAmount != undefined) {
                this.feeAmount = data.feeAmount;
            }
            if ("feeCurrency" in data && data.feeCurrency != undefined) {
                this.feeCurrency = data.feeCurrency;
            }
            if ("refundAmount" in data && data.refundAmount != undefined) {
                this.refundAmount = data.refundAmount;
            }
            if ("refundCurrency" in data && data.refundCurrency != undefined) {
                this.refundCurrency = data.refundCurrency;
            }
            if ("refundTime" in data && data.refundTime != undefined) {
                this.refundTime = data.refundTime;
            }
            if ("refundReason" in data && data.refundReason != undefined) {
                this.refundReason = data.refundReason;
            }
            if ("refundOrderNo" in data && data.refundOrderNo != undefined) {
                this.refundOrderNo = data.refundOrderNo;
            }
        }
    }
    get outOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set outOrderNo(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get productCode() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set productCode(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get orderStatus() {
        return pb_1.Message.getFieldWithDefault(this, 5, OpenOrderStatus._UNKNOWN_OPS) as OpenOrderStatus;
    }
    set orderStatus(value: OpenOrderStatus) {
        pb_1.Message.setField(this, 5, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get orderAmount() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set orderAmount(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get feeAmount() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set feeAmount(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get feeCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set feeCurrency(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get refundAmount() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set refundAmount(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get refundCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set refundCurrency(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get refundTime() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set refundTime(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get refundReason() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set refundReason(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get refundOrderNo() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set refundOrderNo(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data: {
        outOrderNo?: string;
        accountId?: string;
        orderNo?: string;
        productCode?: string;
        orderStatus?: OpenOrderStatus;
        currency?: string;
        orderAmount?: number;
        feeAmount?: number;
        feeCurrency?: string;
        refundAmount?: number;
        refundCurrency?: string;
        refundTime?: string;
        refundReason?: string;
        refundOrderNo?: string;
    }): OpenRefundDetail {
        const message = new OpenRefundDetail({});
        if (data.outOrderNo != null) {
            message.outOrderNo = data.outOrderNo;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.productCode != null) {
            message.productCode = data.productCode;
        }
        if (data.orderStatus != null) {
            message.orderStatus = data.orderStatus;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.orderAmount != null) {
            message.orderAmount = data.orderAmount;
        }
        if (data.feeAmount != null) {
            message.feeAmount = data.feeAmount;
        }
        if (data.feeCurrency != null) {
            message.feeCurrency = data.feeCurrency;
        }
        if (data.refundAmount != null) {
            message.refundAmount = data.refundAmount;
        }
        if (data.refundCurrency != null) {
            message.refundCurrency = data.refundCurrency;
        }
        if (data.refundTime != null) {
            message.refundTime = data.refundTime;
        }
        if (data.refundReason != null) {
            message.refundReason = data.refundReason;
        }
        if (data.refundOrderNo != null) {
            message.refundOrderNo = data.refundOrderNo;
        }
        return message;
    }
    toObject() {
        const data: {
            outOrderNo?: string;
            accountId?: string;
            orderNo?: string;
            productCode?: string;
            orderStatus?: OpenOrderStatus;
            currency?: string;
            orderAmount?: number;
            feeAmount?: number;
            feeCurrency?: string;
            refundAmount?: number;
            refundCurrency?: string;
            refundTime?: string;
            refundReason?: string;
            refundOrderNo?: string;
        } = {};
        if (this.outOrderNo != null) {
            data.outOrderNo = this.outOrderNo;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.productCode != null) {
            data.productCode = this.productCode;
        }
        if (this.orderStatus != null) {
            data.orderStatus = this.orderStatus;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.orderAmount != null) {
            data.orderAmount = this.orderAmount;
        }
        if (this.feeAmount != null) {
            data.feeAmount = this.feeAmount;
        }
        if (this.feeCurrency != null) {
            data.feeCurrency = this.feeCurrency;
        }
        if (this.refundAmount != null) {
            data.refundAmount = this.refundAmount;
        }
        if (this.refundCurrency != null) {
            data.refundCurrency = this.refundCurrency;
        }
        if (this.refundTime != null) {
            data.refundTime = this.refundTime;
        }
        if (this.refundReason != null) {
            data.refundReason = this.refundReason;
        }
        if (this.refundOrderNo != null) {
            data.refundOrderNo = this.refundOrderNo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.outOrderNo.length)
            writer.writeString(1, this.outOrderNo);
        if (this.accountId != "0")
            writer.writeInt64String(2, this.accountId);
        if (this.orderNo.length)
            writer.writeString(3, this.orderNo);
        if (this.productCode.length)
            writer.writeString(4, this.productCode);
        if (this.orderStatus != OpenOrderStatus._UNKNOWN_OPS)
            writer.writeEnum(5, this.orderStatus);
        if (this.currency.length)
            writer.writeString(6, this.currency);
        if (this.orderAmount != 0)
            writer.writeInt64(7, this.orderAmount);
        if (this.feeAmount != 0)
            writer.writeInt64(9, this.feeAmount);
        if (this.feeCurrency.length)
            writer.writeString(10, this.feeCurrency);
        if (this.refundAmount != 0)
            writer.writeInt64(11, this.refundAmount);
        if (this.refundCurrency.length)
            writer.writeString(12, this.refundCurrency);
        if (this.refundTime.length)
            writer.writeString(13, this.refundTime);
        if (this.refundReason.length)
            writer.writeString(14, this.refundReason);
        if (this.refundOrderNo.length)
            writer.writeString(15, this.refundOrderNo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenRefundDetail {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenRefundDetail();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.outOrderNo = reader.readString();
                    break;
                case 2:
                    message.accountId = reader.readInt64String();
                    break;
                case 3:
                    message.orderNo = reader.readString();
                    break;
                case 4:
                    message.productCode = reader.readString();
                    break;
                case 5:
                    message.orderStatus = reader.readEnum();
                    break;
                case 6:
                    message.currency = reader.readString();
                    break;
                case 7:
                    message.orderAmount = reader.readInt64();
                    break;
                case 9:
                    message.feeAmount = reader.readInt64();
                    break;
                case 10:
                    message.feeCurrency = reader.readString();
                    break;
                case 11:
                    message.refundAmount = reader.readInt64();
                    break;
                case 12:
                    message.refundCurrency = reader.readString();
                    break;
                case 13:
                    message.refundTime = reader.readString();
                    break;
                case 14:
                    message.refundReason = reader.readString();
                    break;
                case 15:
                    message.refundOrderNo = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenRefundDetail {
        return OpenRefundDetail.deserialize(bytes);
    }
}
export class RdtReceivingParty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        accountName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("accountName" in data && data.accountName != undefined) {
                this.accountName = data.accountName;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set accountName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        accountId?: string;
        accountName?: string;
    }): RdtReceivingParty {
        const message = new RdtReceivingParty({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.accountName != null) {
            message.accountName = data.accountName;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            accountName?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.accountName != null) {
            data.accountName = this.accountName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.accountName.length)
            writer.writeString(2, this.accountName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RdtReceivingParty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RdtReceivingParty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.accountName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RdtReceivingParty {
        return RdtReceivingParty.deserialize(bytes);
    }
}
export class TtReceivingParty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountNumber?: string;
        accountName?: string;
        swiftBic?: string;
        intermediarySwiftBic?: string;
        address1?: string;
        address2?: string;
        address3?: string;
        routingCode?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountNumber" in data && data.accountNumber != undefined) {
                this.accountNumber = data.accountNumber;
            }
            if ("accountName" in data && data.accountName != undefined) {
                this.accountName = data.accountName;
            }
            if ("swiftBic" in data && data.swiftBic != undefined) {
                this.swiftBic = data.swiftBic;
            }
            if ("intermediarySwiftBic" in data && data.intermediarySwiftBic != undefined) {
                this.intermediarySwiftBic = data.intermediarySwiftBic;
            }
            if ("address1" in data && data.address1 != undefined) {
                this.address1 = data.address1;
            }
            if ("address2" in data && data.address2 != undefined) {
                this.address2 = data.address2;
            }
            if ("address3" in data && data.address3 != undefined) {
                this.address3 = data.address3;
            }
            if ("routingCode" in data && data.routingCode != undefined) {
                this.routingCode = data.routingCode;
            }
        }
    }
    get accountNumber() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set accountNumber(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set accountName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get swiftBic() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set swiftBic(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get intermediarySwiftBic() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set intermediarySwiftBic(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get address1() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set address1(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get address2() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set address2(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get address3() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set address3(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get routingCode() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set routingCode(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        accountNumber?: string;
        accountName?: string;
        swiftBic?: string;
        intermediarySwiftBic?: string;
        address1?: string;
        address2?: string;
        address3?: string;
        routingCode?: string;
    }): TtReceivingParty {
        const message = new TtReceivingParty({});
        if (data.accountNumber != null) {
            message.accountNumber = data.accountNumber;
        }
        if (data.accountName != null) {
            message.accountName = data.accountName;
        }
        if (data.swiftBic != null) {
            message.swiftBic = data.swiftBic;
        }
        if (data.intermediarySwiftBic != null) {
            message.intermediarySwiftBic = data.intermediarySwiftBic;
        }
        if (data.address1 != null) {
            message.address1 = data.address1;
        }
        if (data.address2 != null) {
            message.address2 = data.address2;
        }
        if (data.address3 != null) {
            message.address3 = data.address3;
        }
        if (data.routingCode != null) {
            message.routingCode = data.routingCode;
        }
        return message;
    }
    toObject() {
        const data: {
            accountNumber?: string;
            accountName?: string;
            swiftBic?: string;
            intermediarySwiftBic?: string;
            address1?: string;
            address2?: string;
            address3?: string;
            routingCode?: string;
        } = {};
        if (this.accountNumber != null) {
            data.accountNumber = this.accountNumber;
        }
        if (this.accountName != null) {
            data.accountName = this.accountName;
        }
        if (this.swiftBic != null) {
            data.swiftBic = this.swiftBic;
        }
        if (this.intermediarySwiftBic != null) {
            data.intermediarySwiftBic = this.intermediarySwiftBic;
        }
        if (this.address1 != null) {
            data.address1 = this.address1;
        }
        if (this.address2 != null) {
            data.address2 = this.address2;
        }
        if (this.address3 != null) {
            data.address3 = this.address3;
        }
        if (this.routingCode != null) {
            data.routingCode = this.routingCode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountNumber.length)
            writer.writeString(1, this.accountNumber);
        if (this.accountName.length)
            writer.writeString(2, this.accountName);
        if (this.swiftBic.length)
            writer.writeString(3, this.swiftBic);
        if (this.intermediarySwiftBic.length)
            writer.writeString(4, this.intermediarySwiftBic);
        if (this.address1.length)
            writer.writeString(5, this.address1);
        if (this.address2.length)
            writer.writeString(6, this.address2);
        if (this.address3.length)
            writer.writeString(7, this.address3);
        if (this.routingCode.length)
            writer.writeString(8, this.routingCode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TtReceivingParty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TtReceivingParty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountNumber = reader.readString();
                    break;
                case 2:
                    message.accountName = reader.readString();
                    break;
                case 3:
                    message.swiftBic = reader.readString();
                    break;
                case 4:
                    message.intermediarySwiftBic = reader.readString();
                    break;
                case 5:
                    message.address1 = reader.readString();
                    break;
                case 6:
                    message.address2 = reader.readString();
                    break;
                case 7:
                    message.address3 = reader.readString();
                    break;
                case 8:
                    message.routingCode = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TtReceivingParty {
        return TtReceivingParty.deserialize(bytes);
    }
}
export class ChatsReceivingParty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountNumber?: string;
        accountName?: string;
        swiftBic?: string;
        intermediarySwiftBic?: string;
        address1?: string;
        address2?: string;
        address3?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountNumber" in data && data.accountNumber != undefined) {
                this.accountNumber = data.accountNumber;
            }
            if ("accountName" in data && data.accountName != undefined) {
                this.accountName = data.accountName;
            }
            if ("swiftBic" in data && data.swiftBic != undefined) {
                this.swiftBic = data.swiftBic;
            }
            if ("intermediarySwiftBic" in data && data.intermediarySwiftBic != undefined) {
                this.intermediarySwiftBic = data.intermediarySwiftBic;
            }
            if ("address1" in data && data.address1 != undefined) {
                this.address1 = data.address1;
            }
            if ("address2" in data && data.address2 != undefined) {
                this.address2 = data.address2;
            }
            if ("address3" in data && data.address3 != undefined) {
                this.address3 = data.address3;
            }
        }
    }
    get accountNumber() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set accountNumber(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set accountName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get swiftBic() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set swiftBic(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get intermediarySwiftBic() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set intermediarySwiftBic(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get address1() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set address1(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get address2() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set address2(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get address3() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set address3(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        accountNumber?: string;
        accountName?: string;
        swiftBic?: string;
        intermediarySwiftBic?: string;
        address1?: string;
        address2?: string;
        address3?: string;
    }): ChatsReceivingParty {
        const message = new ChatsReceivingParty({});
        if (data.accountNumber != null) {
            message.accountNumber = data.accountNumber;
        }
        if (data.accountName != null) {
            message.accountName = data.accountName;
        }
        if (data.swiftBic != null) {
            message.swiftBic = data.swiftBic;
        }
        if (data.intermediarySwiftBic != null) {
            message.intermediarySwiftBic = data.intermediarySwiftBic;
        }
        if (data.address1 != null) {
            message.address1 = data.address1;
        }
        if (data.address2 != null) {
            message.address2 = data.address2;
        }
        if (data.address3 != null) {
            message.address3 = data.address3;
        }
        return message;
    }
    toObject() {
        const data: {
            accountNumber?: string;
            accountName?: string;
            swiftBic?: string;
            intermediarySwiftBic?: string;
            address1?: string;
            address2?: string;
            address3?: string;
        } = {};
        if (this.accountNumber != null) {
            data.accountNumber = this.accountNumber;
        }
        if (this.accountName != null) {
            data.accountName = this.accountName;
        }
        if (this.swiftBic != null) {
            data.swiftBic = this.swiftBic;
        }
        if (this.intermediarySwiftBic != null) {
            data.intermediarySwiftBic = this.intermediarySwiftBic;
        }
        if (this.address1 != null) {
            data.address1 = this.address1;
        }
        if (this.address2 != null) {
            data.address2 = this.address2;
        }
        if (this.address3 != null) {
            data.address3 = this.address3;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountNumber.length)
            writer.writeString(1, this.accountNumber);
        if (this.accountName.length)
            writer.writeString(2, this.accountName);
        if (this.swiftBic.length)
            writer.writeString(3, this.swiftBic);
        if (this.intermediarySwiftBic.length)
            writer.writeString(4, this.intermediarySwiftBic);
        if (this.address1.length)
            writer.writeString(5, this.address1);
        if (this.address2.length)
            writer.writeString(6, this.address2);
        if (this.address3.length)
            writer.writeString(7, this.address3);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatsReceivingParty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatsReceivingParty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountNumber = reader.readString();
                    break;
                case 2:
                    message.accountName = reader.readString();
                    break;
                case 3:
                    message.swiftBic = reader.readString();
                    break;
                case 4:
                    message.intermediarySwiftBic = reader.readString();
                    break;
                case 5:
                    message.address1 = reader.readString();
                    break;
                case 6:
                    message.address2 = reader.readString();
                    break;
                case 7:
                    message.address3 = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatsReceivingParty {
        return ChatsReceivingParty.deserialize(bytes);
    }
}
export class QueryLimitParam extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        institutionId?: string;
        accountId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
        }
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        institutionId?: string;
        accountId?: string;
    }): QueryLimitParam {
        const message = new QueryLimitParam({});
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        return message;
    }
    toObject() {
        const data: {
            institutionId?: string;
            accountId?: string;
        } = {};
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.institutionId != "0")
            writer.writeInt64String(1, this.institutionId);
        if (this.accountId != "0")
            writer.writeInt64String(2, this.accountId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLimitParam {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLimitParam();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.institutionId = reader.readInt64String();
                    break;
                case 2:
                    message.accountId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): QueryLimitParam {
        return QueryLimitParam.deserialize(bytes);
    }
}
export class QueryLimitResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: QueryLimitData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, QueryLimitData, 3) as QueryLimitData;
    }
    set data(value: QueryLimitData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof QueryLimitData.prototype.toObject>;
    }): QueryLimitResponse {
        const message = new QueryLimitResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = QueryLimitData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof QueryLimitData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLimitResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLimitResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = QueryLimitData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): QueryLimitResponse {
        return QueryLimitResponse.deserialize(bytes);
    }
}
export class QueryLimitData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        institutionId?: string;
        accountId?: string;
        limitQueryTime?: string;
        leftCollectLimit?: number;
        totalCollectLimit?: number;
        collectLimitCurrency?: string;
        leftTransferLimit?: number;
        totalTransferLimit?: number;
        transferLimitCurrency?: string;
        leftSpecialTransferLimit?: number;
        totalSpecialTransferLimit?: number;
        leftSpecialCollectionLimit?: number;
        totalSpecialCollectionLimit?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("limitQueryTime" in data && data.limitQueryTime != undefined) {
                this.limitQueryTime = data.limitQueryTime;
            }
            if ("leftCollectLimit" in data && data.leftCollectLimit != undefined) {
                this.leftCollectLimit = data.leftCollectLimit;
            }
            if ("totalCollectLimit" in data && data.totalCollectLimit != undefined) {
                this.totalCollectLimit = data.totalCollectLimit;
            }
            if ("collectLimitCurrency" in data && data.collectLimitCurrency != undefined) {
                this.collectLimitCurrency = data.collectLimitCurrency;
            }
            if ("leftTransferLimit" in data && data.leftTransferLimit != undefined) {
                this.leftTransferLimit = data.leftTransferLimit;
            }
            if ("totalTransferLimit" in data && data.totalTransferLimit != undefined) {
                this.totalTransferLimit = data.totalTransferLimit;
            }
            if ("transferLimitCurrency" in data && data.transferLimitCurrency != undefined) {
                this.transferLimitCurrency = data.transferLimitCurrency;
            }
            if ("leftSpecialTransferLimit" in data && data.leftSpecialTransferLimit != undefined) {
                this.leftSpecialTransferLimit = data.leftSpecialTransferLimit;
            }
            if ("totalSpecialTransferLimit" in data && data.totalSpecialTransferLimit != undefined) {
                this.totalSpecialTransferLimit = data.totalSpecialTransferLimit;
            }
            if ("leftSpecialCollectionLimit" in data && data.leftSpecialCollectionLimit != undefined) {
                this.leftSpecialCollectionLimit = data.leftSpecialCollectionLimit;
            }
            if ("totalSpecialCollectionLimit" in data && data.totalSpecialCollectionLimit != undefined) {
                this.totalSpecialCollectionLimit = data.totalSpecialCollectionLimit;
            }
        }
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get limitQueryTime() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set limitQueryTime(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get leftCollectLimit() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set leftCollectLimit(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get totalCollectLimit() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set totalCollectLimit(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get collectLimitCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set collectLimitCurrency(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get leftTransferLimit() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set leftTransferLimit(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get totalTransferLimit() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set totalTransferLimit(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get transferLimitCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set transferLimitCurrency(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get leftSpecialTransferLimit() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set leftSpecialTransferLimit(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get totalSpecialTransferLimit() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set totalSpecialTransferLimit(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get leftSpecialCollectionLimit() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set leftSpecialCollectionLimit(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get totalSpecialCollectionLimit() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set totalSpecialCollectionLimit(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        institutionId?: string;
        accountId?: string;
        limitQueryTime?: string;
        leftCollectLimit?: number;
        totalCollectLimit?: number;
        collectLimitCurrency?: string;
        leftTransferLimit?: number;
        totalTransferLimit?: number;
        transferLimitCurrency?: string;
        leftSpecialTransferLimit?: number;
        totalSpecialTransferLimit?: number;
        leftSpecialCollectionLimit?: number;
        totalSpecialCollectionLimit?: number;
    }): QueryLimitData {
        const message = new QueryLimitData({});
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.limitQueryTime != null) {
            message.limitQueryTime = data.limitQueryTime;
        }
        if (data.leftCollectLimit != null) {
            message.leftCollectLimit = data.leftCollectLimit;
        }
        if (data.totalCollectLimit != null) {
            message.totalCollectLimit = data.totalCollectLimit;
        }
        if (data.collectLimitCurrency != null) {
            message.collectLimitCurrency = data.collectLimitCurrency;
        }
        if (data.leftTransferLimit != null) {
            message.leftTransferLimit = data.leftTransferLimit;
        }
        if (data.totalTransferLimit != null) {
            message.totalTransferLimit = data.totalTransferLimit;
        }
        if (data.transferLimitCurrency != null) {
            message.transferLimitCurrency = data.transferLimitCurrency;
        }
        if (data.leftSpecialTransferLimit != null) {
            message.leftSpecialTransferLimit = data.leftSpecialTransferLimit;
        }
        if (data.totalSpecialTransferLimit != null) {
            message.totalSpecialTransferLimit = data.totalSpecialTransferLimit;
        }
        if (data.leftSpecialCollectionLimit != null) {
            message.leftSpecialCollectionLimit = data.leftSpecialCollectionLimit;
        }
        if (data.totalSpecialCollectionLimit != null) {
            message.totalSpecialCollectionLimit = data.totalSpecialCollectionLimit;
        }
        return message;
    }
    toObject() {
        const data: {
            institutionId?: string;
            accountId?: string;
            limitQueryTime?: string;
            leftCollectLimit?: number;
            totalCollectLimit?: number;
            collectLimitCurrency?: string;
            leftTransferLimit?: number;
            totalTransferLimit?: number;
            transferLimitCurrency?: string;
            leftSpecialTransferLimit?: number;
            totalSpecialTransferLimit?: number;
            leftSpecialCollectionLimit?: number;
            totalSpecialCollectionLimit?: number;
        } = {};
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.limitQueryTime != null) {
            data.limitQueryTime = this.limitQueryTime;
        }
        if (this.leftCollectLimit != null) {
            data.leftCollectLimit = this.leftCollectLimit;
        }
        if (this.totalCollectLimit != null) {
            data.totalCollectLimit = this.totalCollectLimit;
        }
        if (this.collectLimitCurrency != null) {
            data.collectLimitCurrency = this.collectLimitCurrency;
        }
        if (this.leftTransferLimit != null) {
            data.leftTransferLimit = this.leftTransferLimit;
        }
        if (this.totalTransferLimit != null) {
            data.totalTransferLimit = this.totalTransferLimit;
        }
        if (this.transferLimitCurrency != null) {
            data.transferLimitCurrency = this.transferLimitCurrency;
        }
        if (this.leftSpecialTransferLimit != null) {
            data.leftSpecialTransferLimit = this.leftSpecialTransferLimit;
        }
        if (this.totalSpecialTransferLimit != null) {
            data.totalSpecialTransferLimit = this.totalSpecialTransferLimit;
        }
        if (this.leftSpecialCollectionLimit != null) {
            data.leftSpecialCollectionLimit = this.leftSpecialCollectionLimit;
        }
        if (this.totalSpecialCollectionLimit != null) {
            data.totalSpecialCollectionLimit = this.totalSpecialCollectionLimit;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.institutionId != "0")
            writer.writeInt64String(1, this.institutionId);
        if (this.accountId != "0")
            writer.writeInt64String(2, this.accountId);
        if (this.limitQueryTime.length)
            writer.writeString(3, this.limitQueryTime);
        if (this.leftCollectLimit != 0)
            writer.writeInt64(4, this.leftCollectLimit);
        if (this.totalCollectLimit != 0)
            writer.writeInt64(5, this.totalCollectLimit);
        if (this.collectLimitCurrency.length)
            writer.writeString(6, this.collectLimitCurrency);
        if (this.leftTransferLimit != 0)
            writer.writeInt64(7, this.leftTransferLimit);
        if (this.totalTransferLimit != 0)
            writer.writeInt64(8, this.totalTransferLimit);
        if (this.transferLimitCurrency.length)
            writer.writeString(9, this.transferLimitCurrency);
        if (this.leftSpecialTransferLimit != 0)
            writer.writeInt64(10, this.leftSpecialTransferLimit);
        if (this.totalSpecialTransferLimit != 0)
            writer.writeInt64(11, this.totalSpecialTransferLimit);
        if (this.leftSpecialCollectionLimit != 0)
            writer.writeInt64(12, this.leftSpecialCollectionLimit);
        if (this.totalSpecialCollectionLimit != 0)
            writer.writeInt64(13, this.totalSpecialCollectionLimit);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLimitData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLimitData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.institutionId = reader.readInt64String();
                    break;
                case 2:
                    message.accountId = reader.readInt64String();
                    break;
                case 3:
                    message.limitQueryTime = reader.readString();
                    break;
                case 4:
                    message.leftCollectLimit = reader.readInt64();
                    break;
                case 5:
                    message.totalCollectLimit = reader.readInt64();
                    break;
                case 6:
                    message.collectLimitCurrency = reader.readString();
                    break;
                case 7:
                    message.leftTransferLimit = reader.readInt64();
                    break;
                case 8:
                    message.totalTransferLimit = reader.readInt64();
                    break;
                case 9:
                    message.transferLimitCurrency = reader.readString();
                    break;
                case 10:
                    message.leftSpecialTransferLimit = reader.readInt64();
                    break;
                case 11:
                    message.totalSpecialTransferLimit = reader.readInt64();
                    break;
                case 12:
                    message.leftSpecialCollectionLimit = reader.readInt64();
                    break;
                case 13:
                    message.totalSpecialCollectionLimit = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): QueryLimitData {
        return QueryLimitData.deserialize(bytes);
    }
}
export class OpenAccountQueryRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        requestId?: string;
        institutionId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        accountId?: string;
        requestId?: string;
        institutionId?: string;
    }): OpenAccountQueryRequest {
        const message = new OpenAccountQueryRequest({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            requestId?: string;
            institutionId?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.requestId.length)
            writer.writeString(2, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(3, this.institutionId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenAccountQueryRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenAccountQueryRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.requestId = reader.readString();
                    break;
                case 3:
                    message.institutionId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenAccountQueryRequest {
        return OpenAccountQueryRequest.deserialize(bytes);
    }
}
export class OpenAccountQueryResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: OpenAccountQueryData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, OpenAccountQueryData, 3) as OpenAccountQueryData;
    }
    set data(value: OpenAccountQueryData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof OpenAccountQueryData.prototype.toObject>;
    }): OpenAccountQueryResponse {
        const message = new OpenAccountQueryResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = OpenAccountQueryData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof OpenAccountQueryData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenAccountQueryResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenAccountQueryResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = OpenAccountQueryData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenAccountQueryResponse {
        return OpenAccountQueryResponse.deserialize(bytes);
    }
}
export class OpenAccountQueryData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        accountName?: string;
        bankName?: string;
        bankId?: string;
        bankSwiftCode?: string;
        bankLocation?: string;
        bankAccountNumber?: string;
        messageToPayee?: string;
        remittanceInfo?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("accountName" in data && data.accountName != undefined) {
                this.accountName = data.accountName;
            }
            if ("bankName" in data && data.bankName != undefined) {
                this.bankName = data.bankName;
            }
            if ("bankId" in data && data.bankId != undefined) {
                this.bankId = data.bankId;
            }
            if ("bankSwiftCode" in data && data.bankSwiftCode != undefined) {
                this.bankSwiftCode = data.bankSwiftCode;
            }
            if ("bankLocation" in data && data.bankLocation != undefined) {
                this.bankLocation = data.bankLocation;
            }
            if ("bankAccountNumber" in data && data.bankAccountNumber != undefined) {
                this.bankAccountNumber = data.bankAccountNumber;
            }
            if ("messageToPayee" in data && data.messageToPayee != undefined) {
                this.messageToPayee = data.messageToPayee;
            }
            if ("remittanceInfo" in data && data.remittanceInfo != undefined) {
                this.remittanceInfo = data.remittanceInfo;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set accountName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get bankName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set bankName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get bankId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set bankId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get bankSwiftCode() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set bankSwiftCode(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get bankLocation() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set bankLocation(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get bankAccountNumber() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set bankAccountNumber(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get messageToPayee() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set messageToPayee(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get remittanceInfo() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set remittanceInfo(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        accountId?: string;
        accountName?: string;
        bankName?: string;
        bankId?: string;
        bankSwiftCode?: string;
        bankLocation?: string;
        bankAccountNumber?: string;
        messageToPayee?: string;
        remittanceInfo?: string;
    }): OpenAccountQueryData {
        const message = new OpenAccountQueryData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.accountName != null) {
            message.accountName = data.accountName;
        }
        if (data.bankName != null) {
            message.bankName = data.bankName;
        }
        if (data.bankId != null) {
            message.bankId = data.bankId;
        }
        if (data.bankSwiftCode != null) {
            message.bankSwiftCode = data.bankSwiftCode;
        }
        if (data.bankLocation != null) {
            message.bankLocation = data.bankLocation;
        }
        if (data.bankAccountNumber != null) {
            message.bankAccountNumber = data.bankAccountNumber;
        }
        if (data.messageToPayee != null) {
            message.messageToPayee = data.messageToPayee;
        }
        if (data.remittanceInfo != null) {
            message.remittanceInfo = data.remittanceInfo;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            accountName?: string;
            bankName?: string;
            bankId?: string;
            bankSwiftCode?: string;
            bankLocation?: string;
            bankAccountNumber?: string;
            messageToPayee?: string;
            remittanceInfo?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.accountName != null) {
            data.accountName = this.accountName;
        }
        if (this.bankName != null) {
            data.bankName = this.bankName;
        }
        if (this.bankId != null) {
            data.bankId = this.bankId;
        }
        if (this.bankSwiftCode != null) {
            data.bankSwiftCode = this.bankSwiftCode;
        }
        if (this.bankLocation != null) {
            data.bankLocation = this.bankLocation;
        }
        if (this.bankAccountNumber != null) {
            data.bankAccountNumber = this.bankAccountNumber;
        }
        if (this.messageToPayee != null) {
            data.messageToPayee = this.messageToPayee;
        }
        if (this.remittanceInfo != null) {
            data.remittanceInfo = this.remittanceInfo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.accountName.length)
            writer.writeString(2, this.accountName);
        if (this.bankName.length)
            writer.writeString(3, this.bankName);
        if (this.bankId.length)
            writer.writeString(4, this.bankId);
        if (this.bankSwiftCode.length)
            writer.writeString(5, this.bankSwiftCode);
        if (this.bankLocation.length)
            writer.writeString(6, this.bankLocation);
        if (this.bankAccountNumber.length)
            writer.writeString(7, this.bankAccountNumber);
        if (this.messageToPayee.length)
            writer.writeString(8, this.messageToPayee);
        if (this.remittanceInfo.length)
            writer.writeString(9, this.remittanceInfo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenAccountQueryData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenAccountQueryData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.accountName = reader.readString();
                    break;
                case 3:
                    message.bankName = reader.readString();
                    break;
                case 4:
                    message.bankId = reader.readString();
                    break;
                case 5:
                    message.bankSwiftCode = reader.readString();
                    break;
                case 6:
                    message.bankLocation = reader.readString();
                    break;
                case 7:
                    message.bankAccountNumber = reader.readString();
                    break;
                case 8:
                    message.messageToPayee = reader.readString();
                    break;
                case 9:
                    message.remittanceInfo = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenAccountQueryData {
        return OpenAccountQueryData.deserialize(bytes);
    }
}
export class DownloadBillData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        fileUrl?: string;
        fileName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fileUrl" in data && data.fileUrl != undefined) {
                this.fileUrl = data.fileUrl;
            }
            if ("fileName" in data && data.fileName != undefined) {
                this.fileName = data.fileName;
            }
        }
    }
    get fileUrl() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set fileUrl(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get fileName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set fileName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        fileUrl?: string;
        fileName?: string;
    }): DownloadBillData {
        const message = new DownloadBillData({});
        if (data.fileUrl != null) {
            message.fileUrl = data.fileUrl;
        }
        if (data.fileName != null) {
            message.fileName = data.fileName;
        }
        return message;
    }
    toObject() {
        const data: {
            fileUrl?: string;
            fileName?: string;
        } = {};
        if (this.fileUrl != null) {
            data.fileUrl = this.fileUrl;
        }
        if (this.fileName != null) {
            data.fileName = this.fileName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.fileUrl.length)
            writer.writeString(1, this.fileUrl);
        if (this.fileName.length)
            writer.writeString(2, this.fileName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadBillData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadBillData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.fileUrl = reader.readString();
                    break;
                case 2:
                    message.fileName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DownloadBillData {
        return DownloadBillData.deserialize(bytes);
    }
}
export class DownloadBillRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        institutionId?: string;
        accountId?: string;
        billDate?: string;
        currency?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("billDate" in data && data.billDate != undefined) {
                this.billDate = data.billDate;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
        }
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get billDate() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set billDate(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        institutionId?: string;
        accountId?: string;
        billDate?: string;
        currency?: string;
    }): DownloadBillRequest {
        const message = new DownloadBillRequest({});
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.billDate != null) {
            message.billDate = data.billDate;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        return message;
    }
    toObject() {
        const data: {
            institutionId?: string;
            accountId?: string;
            billDate?: string;
            currency?: string;
        } = {};
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.billDate != null) {
            data.billDate = this.billDate;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.institutionId != "0")
            writer.writeInt64String(1, this.institutionId);
        if (this.accountId != "0")
            writer.writeInt64String(2, this.accountId);
        if (this.billDate.length)
            writer.writeString(3, this.billDate);
        if (this.currency.length)
            writer.writeString(4, this.currency);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadBillRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadBillRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.institutionId = reader.readInt64String();
                    break;
                case 2:
                    message.accountId = reader.readInt64String();
                    break;
                case 3:
                    message.billDate = reader.readString();
                    break;
                case 4:
                    message.currency = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DownloadBillRequest {
        return DownloadBillRequest.deserialize(bytes);
    }
}
export class DownloadBillResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: DownloadBillData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, DownloadBillData, 3) as DownloadBillData;
    }
    set data(value: DownloadBillData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof DownloadBillData.prototype.toObject>;
    }): DownloadBillResponse {
        const message = new DownloadBillResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = DownloadBillData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof DownloadBillData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadBillResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadBillResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = DownloadBillData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DownloadBillResponse {
        return DownloadBillResponse.deserialize(bytes);
    }
}
export class FX extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): FX {
        const message = new FX({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FX {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FX();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FX {
        return FX.deserialize(bytes);
    }
}
export enum FXDirection {
    _UNKNOWN_OPS = 0,
    BUY = 1,
    SELL = 2
}
export enum FXOrderStatus {
    _UNKNOWN_STATUS = 0,
    SUBMITTED = 1,
    SUCCESSFUL = 2,
    FAILED = 3,
    CANCELLED = 4,
    REFUNDED = 5
}
export class FXQuoteBulkRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        requestId?: string;
        institutionId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        accountId?: string;
        requestId?: string;
        institutionId?: string;
    }): FXQuoteBulkRequest {
        const message = new FXQuoteBulkRequest({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            requestId?: string;
            institutionId?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.requestId.length)
            writer.writeString(6, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(7, this.institutionId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXQuoteBulkRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXQuoteBulkRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 6:
                    message.requestId = reader.readString();
                    break;
                case 7:
                    message.institutionId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXQuoteBulkRequest {
        return FXQuoteBulkRequest.deserialize(bytes);
    }
}
export class FXQuoteBulkResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: FXQuoteBulkData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, FXQuoteBulkData, 3) as FXQuoteBulkData;
    }
    set data(value: FXQuoteBulkData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof FXQuoteBulkData.prototype.toObject>;
    }): FXQuoteBulkResponse {
        const message = new FXQuoteBulkResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = FXQuoteBulkData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof FXQuoteBulkData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXQuoteBulkResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXQuoteBulkResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = FXQuoteBulkData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXQuoteBulkResponse {
        return FXQuoteBulkResponse.deserialize(bytes);
    }
}
export class FXQuoteBulkData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        rateList?: FXRateData[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("rateList" in data && data.rateList != undefined) {
                this.rateList = data.rateList;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get rateList() {
        return pb_1.Message.getRepeatedWrapperField(this, FXRateData, 2) as FXRateData[];
    }
    set rateList(value: FXRateData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        accountId?: string;
        rateList?: ReturnType<typeof FXRateData.prototype.toObject>[];
    }): FXQuoteBulkData {
        const message = new FXQuoteBulkData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.rateList != null) {
            message.rateList = data.rateList.map(item => FXRateData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            rateList?: ReturnType<typeof FXRateData.prototype.toObject>[];
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.rateList != null) {
            data.rateList = this.rateList.map((item: FXRateData) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.rateList.length)
            writer.writeRepeatedMessage(2, this.rateList, (item: FXRateData) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXQuoteBulkData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXQuoteBulkData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    reader.readMessage(message.rateList, () => pb_1.Message.addToRepeatedWrapperField(message, 2, FXRateData.deserialize(reader), FXRateData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXQuoteBulkData {
        return FXQuoteBulkData.deserialize(bytes);
    }
}
export class FXRateData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sellCurrency?: string;
        buyCurrency?: string;
        baseCurrency?: string;
        termCurrency?: string;
        rate?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sellCurrency" in data && data.sellCurrency != undefined) {
                this.sellCurrency = data.sellCurrency;
            }
            if ("buyCurrency" in data && data.buyCurrency != undefined) {
                this.buyCurrency = data.buyCurrency;
            }
            if ("baseCurrency" in data && data.baseCurrency != undefined) {
                this.baseCurrency = data.baseCurrency;
            }
            if ("termCurrency" in data && data.termCurrency != undefined) {
                this.termCurrency = data.termCurrency;
            }
            if ("rate" in data && data.rate != undefined) {
                this.rate = data.rate;
            }
        }
    }
    get sellCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set sellCurrency(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get buyCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set buyCurrency(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get baseCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set baseCurrency(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get termCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set termCurrency(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get rate() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set rate(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        sellCurrency?: string;
        buyCurrency?: string;
        baseCurrency?: string;
        termCurrency?: string;
        rate?: number;
    }): FXRateData {
        const message = new FXRateData({});
        if (data.sellCurrency != null) {
            message.sellCurrency = data.sellCurrency;
        }
        if (data.buyCurrency != null) {
            message.buyCurrency = data.buyCurrency;
        }
        if (data.baseCurrency != null) {
            message.baseCurrency = data.baseCurrency;
        }
        if (data.termCurrency != null) {
            message.termCurrency = data.termCurrency;
        }
        if (data.rate != null) {
            message.rate = data.rate;
        }
        return message;
    }
    toObject() {
        const data: {
            sellCurrency?: string;
            buyCurrency?: string;
            baseCurrency?: string;
            termCurrency?: string;
            rate?: number;
        } = {};
        if (this.sellCurrency != null) {
            data.sellCurrency = this.sellCurrency;
        }
        if (this.buyCurrency != null) {
            data.buyCurrency = this.buyCurrency;
        }
        if (this.baseCurrency != null) {
            data.baseCurrency = this.baseCurrency;
        }
        if (this.termCurrency != null) {
            data.termCurrency = this.termCurrency;
        }
        if (this.rate != null) {
            data.rate = this.rate;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.sellCurrency.length)
            writer.writeString(1, this.sellCurrency);
        if (this.buyCurrency.length)
            writer.writeString(2, this.buyCurrency);
        if (this.baseCurrency.length)
            writer.writeString(3, this.baseCurrency);
        if (this.termCurrency.length)
            writer.writeString(4, this.termCurrency);
        if (this.rate != 0)
            writer.writeInt64(5, this.rate);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXRateData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXRateData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.sellCurrency = reader.readString();
                    break;
                case 2:
                    message.buyCurrency = reader.readString();
                    break;
                case 3:
                    message.baseCurrency = reader.readString();
                    break;
                case 4:
                    message.termCurrency = reader.readString();
                    break;
                case 5:
                    message.rate = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXRateData {
        return FXRateData.deserialize(bytes);
    }
}
export class FXQuoteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        sellCurrency?: string;
        buyCurrency?: string;
        direction?: FXDirection;
        quoteAmount?: number;
        requestId?: string;
        institutionId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("sellCurrency" in data && data.sellCurrency != undefined) {
                this.sellCurrency = data.sellCurrency;
            }
            if ("buyCurrency" in data && data.buyCurrency != undefined) {
                this.buyCurrency = data.buyCurrency;
            }
            if ("direction" in data && data.direction != undefined) {
                this.direction = data.direction;
            }
            if ("quoteAmount" in data && data.quoteAmount != undefined) {
                this.quoteAmount = data.quoteAmount;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get sellCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set sellCurrency(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get buyCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set buyCurrency(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get direction() {
        return pb_1.Message.getFieldWithDefault(this, 4, FXDirection._UNKNOWN_OPS) as FXDirection;
    }
    set direction(value: FXDirection) {
        pb_1.Message.setField(this, 4, value);
    }
    get quoteAmount() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set quoteAmount(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        accountId?: string;
        sellCurrency?: string;
        buyCurrency?: string;
        direction?: FXDirection;
        quoteAmount?: number;
        requestId?: string;
        institutionId?: string;
    }): FXQuoteRequest {
        const message = new FXQuoteRequest({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.sellCurrency != null) {
            message.sellCurrency = data.sellCurrency;
        }
        if (data.buyCurrency != null) {
            message.buyCurrency = data.buyCurrency;
        }
        if (data.direction != null) {
            message.direction = data.direction;
        }
        if (data.quoteAmount != null) {
            message.quoteAmount = data.quoteAmount;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            sellCurrency?: string;
            buyCurrency?: string;
            direction?: FXDirection;
            quoteAmount?: number;
            requestId?: string;
            institutionId?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.sellCurrency != null) {
            data.sellCurrency = this.sellCurrency;
        }
        if (this.buyCurrency != null) {
            data.buyCurrency = this.buyCurrency;
        }
        if (this.direction != null) {
            data.direction = this.direction;
        }
        if (this.quoteAmount != null) {
            data.quoteAmount = this.quoteAmount;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.sellCurrency.length)
            writer.writeString(2, this.sellCurrency);
        if (this.buyCurrency.length)
            writer.writeString(3, this.buyCurrency);
        if (this.direction != FXDirection._UNKNOWN_OPS)
            writer.writeEnum(4, this.direction);
        if (this.quoteAmount != 0)
            writer.writeInt64(5, this.quoteAmount);
        if (this.requestId.length)
            writer.writeString(6, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(7, this.institutionId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXQuoteRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXQuoteRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.sellCurrency = reader.readString();
                    break;
                case 3:
                    message.buyCurrency = reader.readString();
                    break;
                case 4:
                    message.direction = reader.readEnum();
                    break;
                case 5:
                    message.quoteAmount = reader.readInt64();
                    break;
                case 6:
                    message.requestId = reader.readString();
                    break;
                case 7:
                    message.institutionId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXQuoteRequest {
        return FXQuoteRequest.deserialize(bytes);
    }
}
export class FXQuoteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: FXQuoteData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, FXQuoteData, 3) as FXQuoteData;
    }
    set data(value: FXQuoteData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof FXQuoteData.prototype.toObject>;
    }): FXQuoteResponse {
        const message = new FXQuoteResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = FXQuoteData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof FXQuoteData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXQuoteResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXQuoteResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = FXQuoteData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXQuoteResponse {
        return FXQuoteResponse.deserialize(bytes);
    }
}
export class FXQuoteData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        quoteId?: string;
        expireTime?: string;
        rate?: number;
        amount?: number;
        baseCurrency?: string;
        termCurrency?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("quoteId" in data && data.quoteId != undefined) {
                this.quoteId = data.quoteId;
            }
            if ("expireTime" in data && data.expireTime != undefined) {
                this.expireTime = data.expireTime;
            }
            if ("rate" in data && data.rate != undefined) {
                this.rate = data.rate;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("baseCurrency" in data && data.baseCurrency != undefined) {
                this.baseCurrency = data.baseCurrency;
            }
            if ("termCurrency" in data && data.termCurrency != undefined) {
                this.termCurrency = data.termCurrency;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get quoteId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set quoteId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get expireTime() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set expireTime(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get rate() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set rate(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get baseCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set baseCurrency(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get termCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set termCurrency(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        accountId?: string;
        quoteId?: string;
        expireTime?: string;
        rate?: number;
        amount?: number;
        baseCurrency?: string;
        termCurrency?: string;
    }): FXQuoteData {
        const message = new FXQuoteData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.quoteId != null) {
            message.quoteId = data.quoteId;
        }
        if (data.expireTime != null) {
            message.expireTime = data.expireTime;
        }
        if (data.rate != null) {
            message.rate = data.rate;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.baseCurrency != null) {
            message.baseCurrency = data.baseCurrency;
        }
        if (data.termCurrency != null) {
            message.termCurrency = data.termCurrency;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            quoteId?: string;
            expireTime?: string;
            rate?: number;
            amount?: number;
            baseCurrency?: string;
            termCurrency?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.quoteId != null) {
            data.quoteId = this.quoteId;
        }
        if (this.expireTime != null) {
            data.expireTime = this.expireTime;
        }
        if (this.rate != null) {
            data.rate = this.rate;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.baseCurrency != null) {
            data.baseCurrency = this.baseCurrency;
        }
        if (this.termCurrency != null) {
            data.termCurrency = this.termCurrency;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.quoteId != "0")
            writer.writeInt64String(2, this.quoteId);
        if (this.expireTime.length)
            writer.writeString(3, this.expireTime);
        if (this.rate != 0)
            writer.writeInt64(4, this.rate);
        if (this.amount != 0)
            writer.writeInt64(5, this.amount);
        if (this.baseCurrency.length)
            writer.writeString(6, this.baseCurrency);
        if (this.termCurrency.length)
            writer.writeString(7, this.termCurrency);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXQuoteData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXQuoteData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.quoteId = reader.readInt64String();
                    break;
                case 3:
                    message.expireTime = reader.readString();
                    break;
                case 4:
                    message.rate = reader.readInt64();
                    break;
                case 5:
                    message.amount = reader.readInt64();
                    break;
                case 6:
                    message.baseCurrency = reader.readString();
                    break;
                case 7:
                    message.termCurrency = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXQuoteData {
        return FXQuoteData.deserialize(bytes);
    }
}
export class FXBookRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        quoteId?: string;
        requestId?: string;
        institutionId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("quoteId" in data && data.quoteId != undefined) {
                this.quoteId = data.quoteId;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get quoteId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set quoteId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        accountId?: string;
        quoteId?: string;
        requestId?: string;
        institutionId?: string;
    }): FXBookRequest {
        const message = new FXBookRequest({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.quoteId != null) {
            message.quoteId = data.quoteId;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            quoteId?: string;
            requestId?: string;
            institutionId?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.quoteId != null) {
            data.quoteId = this.quoteId;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.quoteId != "0")
            writer.writeInt64String(2, this.quoteId);
        if (this.requestId.length)
            writer.writeString(3, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(4, this.institutionId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXBookRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXBookRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.quoteId = reader.readInt64String();
                    break;
                case 3:
                    message.requestId = reader.readString();
                    break;
                case 4:
                    message.institutionId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXBookRequest {
        return FXBookRequest.deserialize(bytes);
    }
}
export class FXBookResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: FXBookData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, FXBookData, 3) as FXBookData;
    }
    set data(value: FXBookData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof FXBookData.prototype.toObject>;
    }): FXBookResponse {
        const message = new FXBookResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = FXBookData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof FXBookData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXBookResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXBookResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = FXBookData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXBookResponse {
        return FXBookResponse.deserialize(bytes);
    }
}
export class FXBookData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        orderNo?: string;
        orderStatus?: FXOrderStatus;
        createTime?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("orderStatus" in data && data.orderStatus != undefined) {
                this.orderStatus = data.orderStatus;
            }
            if ("createTime" in data && data.createTime != undefined) {
                this.createTime = data.createTime;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get orderStatus() {
        return pb_1.Message.getFieldWithDefault(this, 3, FXOrderStatus._UNKNOWN_STATUS) as FXOrderStatus;
    }
    set orderStatus(value: FXOrderStatus) {
        pb_1.Message.setField(this, 3, value);
    }
    get createTime() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set createTime(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        accountId?: string;
        orderNo?: string;
        orderStatus?: FXOrderStatus;
        createTime?: string;
    }): FXBookData {
        const message = new FXBookData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.orderStatus != null) {
            message.orderStatus = data.orderStatus;
        }
        if (data.createTime != null) {
            message.createTime = data.createTime;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            orderNo?: string;
            orderStatus?: FXOrderStatus;
            createTime?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.orderStatus != null) {
            data.orderStatus = this.orderStatus;
        }
        if (this.createTime != null) {
            data.createTime = this.createTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.orderNo.length)
            writer.writeString(2, this.orderNo);
        if (this.orderStatus != FXOrderStatus._UNKNOWN_STATUS)
            writer.writeEnum(3, this.orderStatus);
        if (this.createTime.length)
            writer.writeString(4, this.createTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXBookData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXBookData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.orderNo = reader.readString();
                    break;
                case 3:
                    message.orderStatus = reader.readEnum();
                    break;
                case 4:
                    message.createTime = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXBookData {
        return FXBookData.deserialize(bytes);
    }
}
export class FXEnquiryRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        orderNo?: string;
        quoteId?: string;
        requestId?: string;
        institutionId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("quoteId" in data && data.quoteId != undefined) {
                this.quoteId = data.quoteId;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("institutionId" in data && data.institutionId != undefined) {
                this.institutionId = data.institutionId;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get quoteId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
    }
    set quoteId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get institutionId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
    }
    set institutionId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        accountId?: string;
        orderNo?: string;
        quoteId?: string;
        requestId?: string;
        institutionId?: string;
    }): FXEnquiryRequest {
        const message = new FXEnquiryRequest({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.quoteId != null) {
            message.quoteId = data.quoteId;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.institutionId != null) {
            message.institutionId = data.institutionId;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            orderNo?: string;
            quoteId?: string;
            requestId?: string;
            institutionId?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.quoteId != null) {
            data.quoteId = this.quoteId;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.institutionId != null) {
            data.institutionId = this.institutionId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.orderNo.length)
            writer.writeString(2, this.orderNo);
        if (this.quoteId != "0")
            writer.writeInt64String(3, this.quoteId);
        if (this.requestId.length)
            writer.writeString(4, this.requestId);
        if (this.institutionId != "0")
            writer.writeInt64String(5, this.institutionId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXEnquiryRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXEnquiryRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.orderNo = reader.readString();
                    break;
                case 3:
                    message.quoteId = reader.readInt64String();
                    break;
                case 4:
                    message.requestId = reader.readString();
                    break;
                case 5:
                    message.institutionId = reader.readInt64String();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXEnquiryRequest {
        return FXEnquiryRequest.deserialize(bytes);
    }
}
export class FXEnquiryResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: FXEnquiryData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, FXEnquiryData, 3) as FXEnquiryData;
    }
    set data(value: FXEnquiryData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof FXEnquiryData.prototype.toObject>;
    }): FXEnquiryResponse {
        const message = new FXEnquiryResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = FXEnquiryData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof FXEnquiryData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXEnquiryResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXEnquiryResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = FXEnquiryData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXEnquiryResponse {
        return FXEnquiryResponse.deserialize(bytes);
    }
}
export class FXEnquiryData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        orderNo?: string;
        sellCurrency?: string;
        buyCurrency?: string;
        sellAmount?: number;
        buyAmount?: number;
        orderStatus?: FXOrderStatus;
        baseCurrency?: string;
        termCurrency?: string;
        rate?: number;
        createTime?: string;
        finishTime?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("sellCurrency" in data && data.sellCurrency != undefined) {
                this.sellCurrency = data.sellCurrency;
            }
            if ("buyCurrency" in data && data.buyCurrency != undefined) {
                this.buyCurrency = data.buyCurrency;
            }
            if ("sellAmount" in data && data.sellAmount != undefined) {
                this.sellAmount = data.sellAmount;
            }
            if ("buyAmount" in data && data.buyAmount != undefined) {
                this.buyAmount = data.buyAmount;
            }
            if ("orderStatus" in data && data.orderStatus != undefined) {
                this.orderStatus = data.orderStatus;
            }
            if ("baseCurrency" in data && data.baseCurrency != undefined) {
                this.baseCurrency = data.baseCurrency;
            }
            if ("termCurrency" in data && data.termCurrency != undefined) {
                this.termCurrency = data.termCurrency;
            }
            if ("rate" in data && data.rate != undefined) {
                this.rate = data.rate;
            }
            if ("createTime" in data && data.createTime != undefined) {
                this.createTime = data.createTime;
            }
            if ("finishTime" in data && data.finishTime != undefined) {
                this.finishTime = data.finishTime;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get sellCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set sellCurrency(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get buyCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set buyCurrency(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get sellAmount() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set sellAmount(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get buyAmount() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set buyAmount(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get orderStatus() {
        return pb_1.Message.getFieldWithDefault(this, 7, FXOrderStatus._UNKNOWN_STATUS) as FXOrderStatus;
    }
    set orderStatus(value: FXOrderStatus) {
        pb_1.Message.setField(this, 7, value);
    }
    get baseCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set baseCurrency(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get termCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set termCurrency(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get rate() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set rate(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get createTime() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set createTime(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get finishTime() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set finishTime(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        accountId?: string;
        orderNo?: string;
        sellCurrency?: string;
        buyCurrency?: string;
        sellAmount?: number;
        buyAmount?: number;
        orderStatus?: FXOrderStatus;
        baseCurrency?: string;
        termCurrency?: string;
        rate?: number;
        createTime?: string;
        finishTime?: string;
    }): FXEnquiryData {
        const message = new FXEnquiryData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.sellCurrency != null) {
            message.sellCurrency = data.sellCurrency;
        }
        if (data.buyCurrency != null) {
            message.buyCurrency = data.buyCurrency;
        }
        if (data.sellAmount != null) {
            message.sellAmount = data.sellAmount;
        }
        if (data.buyAmount != null) {
            message.buyAmount = data.buyAmount;
        }
        if (data.orderStatus != null) {
            message.orderStatus = data.orderStatus;
        }
        if (data.baseCurrency != null) {
            message.baseCurrency = data.baseCurrency;
        }
        if (data.termCurrency != null) {
            message.termCurrency = data.termCurrency;
        }
        if (data.rate != null) {
            message.rate = data.rate;
        }
        if (data.createTime != null) {
            message.createTime = data.createTime;
        }
        if (data.finishTime != null) {
            message.finishTime = data.finishTime;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            orderNo?: string;
            sellCurrency?: string;
            buyCurrency?: string;
            sellAmount?: number;
            buyAmount?: number;
            orderStatus?: FXOrderStatus;
            baseCurrency?: string;
            termCurrency?: string;
            rate?: number;
            createTime?: string;
            finishTime?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.sellCurrency != null) {
            data.sellCurrency = this.sellCurrency;
        }
        if (this.buyCurrency != null) {
            data.buyCurrency = this.buyCurrency;
        }
        if (this.sellAmount != null) {
            data.sellAmount = this.sellAmount;
        }
        if (this.buyAmount != null) {
            data.buyAmount = this.buyAmount;
        }
        if (this.orderStatus != null) {
            data.orderStatus = this.orderStatus;
        }
        if (this.baseCurrency != null) {
            data.baseCurrency = this.baseCurrency;
        }
        if (this.termCurrency != null) {
            data.termCurrency = this.termCurrency;
        }
        if (this.rate != null) {
            data.rate = this.rate;
        }
        if (this.createTime != null) {
            data.createTime = this.createTime;
        }
        if (this.finishTime != null) {
            data.finishTime = this.finishTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.orderNo.length)
            writer.writeString(2, this.orderNo);
        if (this.sellCurrency.length)
            writer.writeString(3, this.sellCurrency);
        if (this.buyCurrency.length)
            writer.writeString(4, this.buyCurrency);
        if (this.sellAmount != 0)
            writer.writeInt64(5, this.sellAmount);
        if (this.buyAmount != 0)
            writer.writeInt64(6, this.buyAmount);
        if (this.orderStatus != FXOrderStatus._UNKNOWN_STATUS)
            writer.writeEnum(7, this.orderStatus);
        if (this.baseCurrency.length)
            writer.writeString(8, this.baseCurrency);
        if (this.termCurrency.length)
            writer.writeString(9, this.termCurrency);
        if (this.rate != 0)
            writer.writeInt64(10, this.rate);
        if (this.createTime.length)
            writer.writeString(11, this.createTime);
        if (this.finishTime.length)
            writer.writeString(12, this.finishTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXEnquiryData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXEnquiryData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.orderNo = reader.readString();
                    break;
                case 3:
                    message.sellCurrency = reader.readString();
                    break;
                case 4:
                    message.buyCurrency = reader.readString();
                    break;
                case 5:
                    message.sellAmount = reader.readInt64();
                    break;
                case 6:
                    message.buyAmount = reader.readInt64();
                    break;
                case 7:
                    message.orderStatus = reader.readEnum();
                    break;
                case 8:
                    message.baseCurrency = reader.readString();
                    break;
                case 9:
                    message.termCurrency = reader.readString();
                    break;
                case 10:
                    message.rate = reader.readInt64();
                    break;
                case 11:
                    message.createTime = reader.readString();
                    break;
                case 12:
                    message.finishTime = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXEnquiryData {
        return FXEnquiryData.deserialize(bytes);
    }
}
export class FXOrderResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: FXOrderDetailData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, FXOrderDetailData, 3) as FXOrderDetailData;
    }
    set data(value: FXOrderDetailData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof FXOrderDetailData.prototype.toObject>;
    }): FXOrderResponse {
        const message = new FXOrderResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = FXOrderDetailData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof FXOrderDetailData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXOrderResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXOrderResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = FXOrderDetailData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXOrderResponse {
        return FXOrderResponse.deserialize(bytes);
    }
}
export class FXOrderDetailData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accountId?: string;
        orderNo?: string;
        sellCurrency?: string;
        buyCurrency?: string;
        sellAmount?: number;
        buyAmount?: number;
        orderStatus?: FXOrderStatus;
        baseCurrency?: string;
        termCurrency?: string;
        rate?: number;
        createTime?: string;
        finishTime?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accountId" in data && data.accountId != undefined) {
                this.accountId = data.accountId;
            }
            if ("orderNo" in data && data.orderNo != undefined) {
                this.orderNo = data.orderNo;
            }
            if ("sellCurrency" in data && data.sellCurrency != undefined) {
                this.sellCurrency = data.sellCurrency;
            }
            if ("buyCurrency" in data && data.buyCurrency != undefined) {
                this.buyCurrency = data.buyCurrency;
            }
            if ("sellAmount" in data && data.sellAmount != undefined) {
                this.sellAmount = data.sellAmount;
            }
            if ("buyAmount" in data && data.buyAmount != undefined) {
                this.buyAmount = data.buyAmount;
            }
            if ("orderStatus" in data && data.orderStatus != undefined) {
                this.orderStatus = data.orderStatus;
            }
            if ("baseCurrency" in data && data.baseCurrency != undefined) {
                this.baseCurrency = data.baseCurrency;
            }
            if ("termCurrency" in data && data.termCurrency != undefined) {
                this.termCurrency = data.termCurrency;
            }
            if ("rate" in data && data.rate != undefined) {
                this.rate = data.rate;
            }
            if ("createTime" in data && data.createTime != undefined) {
                this.createTime = data.createTime;
            }
            if ("finishTime" in data && data.finishTime != undefined) {
                this.finishTime = data.finishTime;
            }
        }
    }
    get accountId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set accountId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get orderNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set orderNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get sellCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set sellCurrency(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get buyCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set buyCurrency(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get sellAmount() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set sellAmount(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get buyAmount() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set buyAmount(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get orderStatus() {
        return pb_1.Message.getFieldWithDefault(this, 7, FXOrderStatus._UNKNOWN_STATUS) as FXOrderStatus;
    }
    set orderStatus(value: FXOrderStatus) {
        pb_1.Message.setField(this, 7, value);
    }
    get baseCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set baseCurrency(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get termCurrency() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set termCurrency(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get rate() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set rate(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get createTime() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set createTime(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get finishTime() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set finishTime(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        accountId?: string;
        orderNo?: string;
        sellCurrency?: string;
        buyCurrency?: string;
        sellAmount?: number;
        buyAmount?: number;
        orderStatus?: FXOrderStatus;
        baseCurrency?: string;
        termCurrency?: string;
        rate?: number;
        createTime?: string;
        finishTime?: string;
    }): FXOrderDetailData {
        const message = new FXOrderDetailData({});
        if (data.accountId != null) {
            message.accountId = data.accountId;
        }
        if (data.orderNo != null) {
            message.orderNo = data.orderNo;
        }
        if (data.sellCurrency != null) {
            message.sellCurrency = data.sellCurrency;
        }
        if (data.buyCurrency != null) {
            message.buyCurrency = data.buyCurrency;
        }
        if (data.sellAmount != null) {
            message.sellAmount = data.sellAmount;
        }
        if (data.buyAmount != null) {
            message.buyAmount = data.buyAmount;
        }
        if (data.orderStatus != null) {
            message.orderStatus = data.orderStatus;
        }
        if (data.baseCurrency != null) {
            message.baseCurrency = data.baseCurrency;
        }
        if (data.termCurrency != null) {
            message.termCurrency = data.termCurrency;
        }
        if (data.rate != null) {
            message.rate = data.rate;
        }
        if (data.createTime != null) {
            message.createTime = data.createTime;
        }
        if (data.finishTime != null) {
            message.finishTime = data.finishTime;
        }
        return message;
    }
    toObject() {
        const data: {
            accountId?: string;
            orderNo?: string;
            sellCurrency?: string;
            buyCurrency?: string;
            sellAmount?: number;
            buyAmount?: number;
            orderStatus?: FXOrderStatus;
            baseCurrency?: string;
            termCurrency?: string;
            rate?: number;
            createTime?: string;
            finishTime?: string;
        } = {};
        if (this.accountId != null) {
            data.accountId = this.accountId;
        }
        if (this.orderNo != null) {
            data.orderNo = this.orderNo;
        }
        if (this.sellCurrency != null) {
            data.sellCurrency = this.sellCurrency;
        }
        if (this.buyCurrency != null) {
            data.buyCurrency = this.buyCurrency;
        }
        if (this.sellAmount != null) {
            data.sellAmount = this.sellAmount;
        }
        if (this.buyAmount != null) {
            data.buyAmount = this.buyAmount;
        }
        if (this.orderStatus != null) {
            data.orderStatus = this.orderStatus;
        }
        if (this.baseCurrency != null) {
            data.baseCurrency = this.baseCurrency;
        }
        if (this.termCurrency != null) {
            data.termCurrency = this.termCurrency;
        }
        if (this.rate != null) {
            data.rate = this.rate;
        }
        if (this.createTime != null) {
            data.createTime = this.createTime;
        }
        if (this.finishTime != null) {
            data.finishTime = this.finishTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accountId != "0")
            writer.writeInt64String(1, this.accountId);
        if (this.orderNo.length)
            writer.writeString(2, this.orderNo);
        if (this.sellCurrency.length)
            writer.writeString(3, this.sellCurrency);
        if (this.buyCurrency.length)
            writer.writeString(4, this.buyCurrency);
        if (this.sellAmount != 0)
            writer.writeInt64(5, this.sellAmount);
        if (this.buyAmount != 0)
            writer.writeInt64(6, this.buyAmount);
        if (this.orderStatus != FXOrderStatus._UNKNOWN_STATUS)
            writer.writeEnum(7, this.orderStatus);
        if (this.baseCurrency.length)
            writer.writeString(8, this.baseCurrency);
        if (this.termCurrency.length)
            writer.writeString(9, this.termCurrency);
        if (this.rate != 0)
            writer.writeInt64(10, this.rate);
        if (this.createTime.length)
            writer.writeString(11, this.createTime);
        if (this.finishTime.length)
            writer.writeString(12, this.finishTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FXOrderDetailData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FXOrderDetailData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.accountId = reader.readInt64String();
                    break;
                case 2:
                    message.orderNo = reader.readString();
                    break;
                case 3:
                    message.sellCurrency = reader.readString();
                    break;
                case 4:
                    message.buyCurrency = reader.readString();
                    break;
                case 5:
                    message.sellAmount = reader.readInt64();
                    break;
                case 6:
                    message.buyAmount = reader.readInt64();
                    break;
                case 7:
                    message.orderStatus = reader.readEnum();
                    break;
                case 8:
                    message.baseCurrency = reader.readString();
                    break;
                case 9:
                    message.termCurrency = reader.readString();
                    break;
                case 10:
                    message.rate = reader.readInt64();
                    break;
                case 11:
                    message.createTime = reader.readString();
                    break;
                case 12:
                    message.finishTime = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FXOrderDetailData {
        return FXOrderDetailData.deserialize(bytes);
    }
}
export class CallbackRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        businessType?: PaymentBusinessType;
        data?: Uint8Array;
        clientKeyId?: string;
        rdKeyId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("businessType" in data && data.businessType != undefined) {
                this.businessType = data.businessType;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("clientKeyId" in data && data.clientKeyId != undefined) {
                this.clientKeyId = data.clientKeyId;
            }
            if ("rdKeyId" in data && data.rdKeyId != undefined) {
                this.rdKeyId = data.rdKeyId;
            }
        }
    }
    get businessType() {
        return pb_1.Message.getFieldWithDefault(this, 2, PaymentBusinessType.PAYMENT_BUSINESS_TYPE_UNKNOWN) as PaymentBusinessType;
    }
    set businessType(value: PaymentBusinessType) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get clientKeyId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set clientKeyId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get rdKeyId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set rdKeyId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        businessType?: PaymentBusinessType;
        data?: Uint8Array;
        clientKeyId?: string;
        rdKeyId?: string;
    }): CallbackRequest {
        const message = new CallbackRequest({});
        if (data.businessType != null) {
            message.businessType = data.businessType;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        if (data.clientKeyId != null) {
            message.clientKeyId = data.clientKeyId;
        }
        if (data.rdKeyId != null) {
            message.rdKeyId = data.rdKeyId;
        }
        return message;
    }
    toObject() {
        const data: {
            businessType?: PaymentBusinessType;
            data?: Uint8Array;
            clientKeyId?: string;
            rdKeyId?: string;
        } = {};
        if (this.businessType != null) {
            data.businessType = this.businessType;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        if (this.clientKeyId != null) {
            data.clientKeyId = this.clientKeyId;
        }
        if (this.rdKeyId != null) {
            data.rdKeyId = this.rdKeyId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.businessType != PaymentBusinessType.PAYMENT_BUSINESS_TYPE_UNKNOWN)
            writer.writeEnum(2, this.businessType);
        if (this.data.length)
            writer.writeBytes(3, this.data);
        if (this.clientKeyId.length)
            writer.writeString(4, this.clientKeyId);
        if (this.rdKeyId.length)
            writer.writeString(5, this.rdKeyId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallbackRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallbackRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.businessType = reader.readEnum();
                    break;
                case 3:
                    message.data = reader.readBytes();
                    break;
                case 4:
                    message.clientKeyId = reader.readString();
                    break;
                case 5:
                    message.rdKeyId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CallbackRequest {
        return CallbackRequest.deserialize(bytes);
    }
}
export class ApiReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        reqId?: string;
        timestamp?: string;
        content?: Uint8Array;
        clientKeyId?: string;
        rdKeyId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reqId" in data && data.reqId != undefined) {
                this.reqId = data.reqId;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
            if ("clientKeyId" in data && data.clientKeyId != undefined) {
                this.clientKeyId = data.clientKeyId;
            }
            if ("rdKeyId" in data && data.rdKeyId != undefined) {
                this.rdKeyId = data.rdKeyId;
            }
        }
    }
    get reqId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set reqId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set timestamp(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set content(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get clientKeyId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set clientKeyId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get rdKeyId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set rdKeyId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        reqId?: string;
        timestamp?: string;
        content?: Uint8Array;
        clientKeyId?: string;
        rdKeyId?: string;
    }): ApiReq {
        const message = new ApiReq({});
        if (data.reqId != null) {
            message.reqId = data.reqId;
        }
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        if (data.clientKeyId != null) {
            message.clientKeyId = data.clientKeyId;
        }
        if (data.rdKeyId != null) {
            message.rdKeyId = data.rdKeyId;
        }
        return message;
    }
    toObject() {
        const data: {
            reqId?: string;
            timestamp?: string;
            content?: Uint8Array;
            clientKeyId?: string;
            rdKeyId?: string;
        } = {};
        if (this.reqId != null) {
            data.reqId = this.reqId;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        if (this.clientKeyId != null) {
            data.clientKeyId = this.clientKeyId;
        }
        if (this.rdKeyId != null) {
            data.rdKeyId = this.rdKeyId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.reqId.length)
            writer.writeString(1, this.reqId);
        if (this.timestamp != "0")
            writer.writeInt64String(2, this.timestamp);
        if (this.content.length)
            writer.writeBytes(3, this.content);
        if (this.clientKeyId.length)
            writer.writeString(4, this.clientKeyId);
        if (this.rdKeyId.length)
            writer.writeString(5, this.rdKeyId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.reqId = reader.readString();
                    break;
                case 2:
                    message.timestamp = reader.readInt64String();
                    break;
                case 3:
                    message.content = reader.readBytes();
                    break;
                case 4:
                    message.clientKeyId = reader.readString();
                    break;
                case 5:
                    message.rdKeyId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApiReq {
        return ApiReq.deserialize(bytes);
    }
}
export class ApiResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        reason?: string;
        body?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("body" in data && data.body != undefined) {
                this.body = data.body;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get body() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set body(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        code?: number;
        reason?: string;
        body?: Uint8Array;
    }): ApiResp {
        const message = new ApiResp({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.body != null) {
            message.body = data.body;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            reason?: string;
            body?: Uint8Array;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.body != null) {
            data.body = this.body;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.reason.length)
            writer.writeString(2, this.reason);
        if (this.body.length)
            writer.writeBytes(3, this.body);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.reason = reader.readString();
                    break;
                case 3:
                    message.body = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApiResp {
        return ApiResp.deserialize(bytes);
    }
}
export class Reason extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        reason?: string;
        message?: string;
        metadata?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
        if (!this.metadata)
            this.metadata = new Map();
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get metadata() {
        return pb_1.Message.getField(this, 4) as any as Map<string, string>;
    }
    set metadata(value: Map<string, string>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    static fromObject(data: {
        code?: number;
        reason?: string;
        message?: string;
        metadata?: {
            [key: string]: string;
        };
    }): Reason {
        const message = new Reason({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (typeof data.metadata == "object") {
            message.metadata = new Map(Object.entries(data.metadata));
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            reason?: string;
            message?: string;
            metadata?: {
                [key: string]: string;
            };
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.metadata != null) {
            data.metadata = (Object.fromEntries)(this.metadata);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.reason.length)
            writer.writeString(2, this.reason);
        if (this.message.length)
            writer.writeString(3, this.message);
        for (const [key, value] of this.metadata) {
            writer.writeMessage(4, this.metadata, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reason {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reason();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.reason = reader.readString();
                    break;
                case 3:
                    message.message = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Reason {
        return Reason.deserialize(bytes);
    }
}
