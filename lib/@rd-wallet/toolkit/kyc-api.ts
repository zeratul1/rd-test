/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: kyc-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class FileUploadResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        msg?: string;
        data?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        code?: number;
        msg?: string;
        data?: string;
    }): FileUploadResp {
        const message = new FileUploadResp({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            msg?: string;
            data?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (this.data.length)
            writer.writeString(3, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileUploadResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileUploadResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                case 3:
                    message.data = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FileUploadResp {
        return FileUploadResp.deserialize(bytes);
    }
}
export class ApplicationSubmissionReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        outApplicationNo?: string;
        applicationType?: number;
        form?: ProfileFormReq;
        openNoticePush?: boolean;
        requestId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("outApplicationNo" in data && data.outApplicationNo != undefined) {
                this.outApplicationNo = data.outApplicationNo;
            }
            if ("applicationType" in data && data.applicationType != undefined) {
                this.applicationType = data.applicationType;
            }
            if ("form" in data && data.form != undefined) {
                this.form = data.form;
            }
            if ("openNoticePush" in data && data.openNoticePush != undefined) {
                this.openNoticePush = data.openNoticePush;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
        }
    }
    get outApplicationNo() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set outApplicationNo(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get applicationType() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set applicationType(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get form() {
        return pb_1.Message.getWrapperField(this, ProfileFormReq, 3) as ProfileFormReq;
    }
    set form(value: ProfileFormReq) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_form() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get openNoticePush() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set openNoticePush(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        outApplicationNo?: string;
        applicationType?: number;
        form?: ReturnType<typeof ProfileFormReq.prototype.toObject>;
        openNoticePush?: boolean;
        requestId?: string;
    }): ApplicationSubmissionReq {
        const message = new ApplicationSubmissionReq({});
        if (data.outApplicationNo != null) {
            message.outApplicationNo = data.outApplicationNo;
        }
        if (data.applicationType != null) {
            message.applicationType = data.applicationType;
        }
        if (data.form != null) {
            message.form = ProfileFormReq.fromObject(data.form);
        }
        if (data.openNoticePush != null) {
            message.openNoticePush = data.openNoticePush;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        return message;
    }
    toObject() {
        const data: {
            outApplicationNo?: string;
            applicationType?: number;
            form?: ReturnType<typeof ProfileFormReq.prototype.toObject>;
            openNoticePush?: boolean;
            requestId?: string;
        } = {};
        if (this.outApplicationNo != null) {
            data.outApplicationNo = this.outApplicationNo;
        }
        if (this.applicationType != null) {
            data.applicationType = this.applicationType;
        }
        if (this.form != null) {
            data.form = this.form.toObject();
        }
        if (this.openNoticePush != null) {
            data.openNoticePush = this.openNoticePush;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.outApplicationNo.length)
            writer.writeString(1, this.outApplicationNo);
        if (this.applicationType != 0)
            writer.writeInt32(2, this.applicationType);
        if (this.has_form)
            writer.writeMessage(3, this.form, () => this.form.serialize(writer));
        if (this.openNoticePush != false)
            writer.writeBool(4, this.openNoticePush);
        if (this.requestId.length)
            writer.writeString(5, this.requestId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationSubmissionReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationSubmissionReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.outApplicationNo = reader.readString();
                    break;
                case 2:
                    message.applicationType = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.form, () => message.form = ProfileFormReq.deserialize(reader));
                    break;
                case 4:
                    message.openNoticePush = reader.readBool();
                    break;
                case 5:
                    message.requestId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplicationSubmissionReq {
        return ApplicationSubmissionReq.deserialize(bytes);
    }
}
export class ApplicationSubmissionResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: ApplicationSubmissionData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, ApplicationSubmissionData, 3) as ApplicationSubmissionData;
    }
    set data(value: ApplicationSubmissionData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof ApplicationSubmissionData.prototype.toObject>;
    }): ApplicationSubmissionResp {
        const message = new ApplicationSubmissionResp({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = ApplicationSubmissionData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof ApplicationSubmissionData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationSubmissionResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationSubmissionResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = ApplicationSubmissionData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplicationSubmissionResp {
        return ApplicationSubmissionResp.deserialize(bytes);
    }
}
export class ApplicationSubmissionData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        applicationNo?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("applicationNo" in data && data.applicationNo != undefined) {
                this.applicationNo = data.applicationNo;
            }
        }
    }
    get applicationNo() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set applicationNo(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        applicationNo?: string;
    }): ApplicationSubmissionData {
        const message = new ApplicationSubmissionData({});
        if (data.applicationNo != null) {
            message.applicationNo = data.applicationNo;
        }
        return message;
    }
    toObject() {
        const data: {
            applicationNo?: string;
        } = {};
        if (this.applicationNo != null) {
            data.applicationNo = this.applicationNo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.applicationNo.length)
            writer.writeString(1, this.applicationNo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationSubmissionData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationSubmissionData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.applicationNo = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplicationSubmissionData {
        return ApplicationSubmissionData.deserialize(bytes);
    }
}
export class ApplicationQueryReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        outApplicationNo?: string;
        applicationNo?: string;
        requestId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("outApplicationNo" in data && data.outApplicationNo != undefined) {
                this.outApplicationNo = data.outApplicationNo;
            }
            if ("applicationNo" in data && data.applicationNo != undefined) {
                this.applicationNo = data.applicationNo;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
        }
    }
    get outApplicationNo() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set outApplicationNo(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get applicationNo() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set applicationNo(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        outApplicationNo?: string;
        applicationNo?: string;
        requestId?: string;
    }): ApplicationQueryReq {
        const message = new ApplicationQueryReq({});
        if (data.outApplicationNo != null) {
            message.outApplicationNo = data.outApplicationNo;
        }
        if (data.applicationNo != null) {
            message.applicationNo = data.applicationNo;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        return message;
    }
    toObject() {
        const data: {
            outApplicationNo?: string;
            applicationNo?: string;
            requestId?: string;
        } = {};
        if (this.outApplicationNo != null) {
            data.outApplicationNo = this.outApplicationNo;
        }
        if (this.applicationNo != null) {
            data.applicationNo = this.applicationNo;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.outApplicationNo.length)
            writer.writeString(1, this.outApplicationNo);
        if (this.applicationNo.length)
            writer.writeString(2, this.applicationNo);
        if (this.requestId.length)
            writer.writeString(4, this.requestId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationQueryReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationQueryReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.outApplicationNo = reader.readString();
                    break;
                case 2:
                    message.applicationNo = reader.readString();
                    break;
                case 4:
                    message.requestId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplicationQueryReq {
        return ApplicationQueryReq.deserialize(bytes);
    }
}
export class ApplicationQueryResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: ApplicationQueryData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, ApplicationQueryData, 3) as ApplicationQueryData;
    }
    set data(value: ApplicationQueryData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof ApplicationQueryData.prototype.toObject>;
    }): ApplicationQueryResp {
        const message = new ApplicationQueryResp({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = ApplicationQueryData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof ApplicationQueryData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationQueryResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationQueryResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = ApplicationQueryData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplicationQueryResp {
        return ApplicationQueryResp.deserialize(bytes);
    }
}
export class ApplicationQueryData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        applicationNo?: string;
        applicationStatus?: string;
        corporateId?: string;
        errors?: ProfileError[];
        walletAccount?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("applicationNo" in data && data.applicationNo != undefined) {
                this.applicationNo = data.applicationNo;
            }
            if ("applicationStatus" in data && data.applicationStatus != undefined) {
                this.applicationStatus = data.applicationStatus;
            }
            if ("corporateId" in data && data.corporateId != undefined) {
                this.corporateId = data.corporateId;
            }
            if ("errors" in data && data.errors != undefined) {
                this.errors = data.errors;
            }
            if ("walletAccount" in data && data.walletAccount != undefined) {
                this.walletAccount = data.walletAccount;
            }
        }
    }
    get applicationNo() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set applicationNo(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get applicationStatus() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set applicationStatus(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get corporateId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set corporateId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get errors() {
        return pb_1.Message.getRepeatedWrapperField(this, ProfileError, 4) as ProfileError[];
    }
    set errors(value: ProfileError[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get walletAccount() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set walletAccount(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        applicationNo?: string;
        applicationStatus?: string;
        corporateId?: string;
        errors?: ReturnType<typeof ProfileError.prototype.toObject>[];
        walletAccount?: string;
    }): ApplicationQueryData {
        const message = new ApplicationQueryData({});
        if (data.applicationNo != null) {
            message.applicationNo = data.applicationNo;
        }
        if (data.applicationStatus != null) {
            message.applicationStatus = data.applicationStatus;
        }
        if (data.corporateId != null) {
            message.corporateId = data.corporateId;
        }
        if (data.errors != null) {
            message.errors = data.errors.map(item => ProfileError.fromObject(item));
        }
        if (data.walletAccount != null) {
            message.walletAccount = data.walletAccount;
        }
        return message;
    }
    toObject() {
        const data: {
            applicationNo?: string;
            applicationStatus?: string;
            corporateId?: string;
            errors?: ReturnType<typeof ProfileError.prototype.toObject>[];
            walletAccount?: string;
        } = {};
        if (this.applicationNo != null) {
            data.applicationNo = this.applicationNo;
        }
        if (this.applicationStatus != null) {
            data.applicationStatus = this.applicationStatus;
        }
        if (this.corporateId != null) {
            data.corporateId = this.corporateId;
        }
        if (this.errors != null) {
            data.errors = this.errors.map((item: ProfileError) => item.toObject());
        }
        if (this.walletAccount != null) {
            data.walletAccount = this.walletAccount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.applicationNo.length)
            writer.writeString(1, this.applicationNo);
        if (this.applicationStatus.length)
            writer.writeString(2, this.applicationStatus);
        if (this.corporateId.length)
            writer.writeString(3, this.corporateId);
        if (this.errors.length)
            writer.writeRepeatedMessage(4, this.errors, (item: ProfileError) => item.serialize(writer));
        if (this.walletAccount.length)
            writer.writeString(5, this.walletAccount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationQueryData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationQueryData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.applicationNo = reader.readString();
                    break;
                case 2:
                    message.applicationStatus = reader.readString();
                    break;
                case 3:
                    message.corporateId = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.errors, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ProfileError.deserialize(reader), ProfileError));
                    break;
                case 5:
                    message.walletAccount = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplicationQueryData {
        return ApplicationQueryData.deserialize(bytes);
    }
}
export class ProfileDetailReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        corporateId?: string;
        requestId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("corporateId" in data && data.corporateId != undefined) {
                this.corporateId = data.corporateId;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
        }
    }
    get corporateId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set corporateId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        corporateId?: string;
        requestId?: string;
    }): ProfileDetailReq {
        const message = new ProfileDetailReq({});
        if (data.corporateId != null) {
            message.corporateId = data.corporateId;
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        return message;
    }
    toObject() {
        const data: {
            corporateId?: string;
            requestId?: string;
        } = {};
        if (this.corporateId != null) {
            data.corporateId = this.corporateId;
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.corporateId.length)
            writer.writeString(1, this.corporateId);
        if (this.requestId.length)
            writer.writeString(4, this.requestId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileDetailReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileDetailReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.corporateId = reader.readString();
                    break;
                case 4:
                    message.requestId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileDetailReq {
        return ProfileDetailReq.deserialize(bytes);
    }
}
export class ProfileDetailResp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        message?: string;
        data?: ProfileDetailData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getWrapperField(this, ProfileDetailData, 3) as ProfileDetailData;
    }
    set data(value: ProfileDetailData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        code?: number;
        message?: string;
        data?: ReturnType<typeof ProfileDetailData.prototype.toObject>;
    }): ProfileDetailResp {
        const message = new ProfileDetailResp({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = ProfileDetailData.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            message?: string;
            data?: ReturnType<typeof ProfileDetailData.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.has_data)
            writer.writeMessage(3, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileDetailResp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileDetailResp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.data, () => message.data = ProfileDetailData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileDetailResp {
        return ProfileDetailResp.deserialize(bytes);
    }
}
export class ProfileDetailData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        corporateId?: string;
        profile?: ProfileFormReq;
        errors?: ProfileErrorReq[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("corporateId" in data && data.corporateId != undefined) {
                this.corporateId = data.corporateId;
            }
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
            if ("errors" in data && data.errors != undefined) {
                this.errors = data.errors;
            }
        }
    }
    get corporateId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set corporateId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, ProfileFormReq, 2) as ProfileFormReq;
    }
    set profile(value: ProfileFormReq) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get errors() {
        return pb_1.Message.getRepeatedWrapperField(this, ProfileErrorReq, 3) as ProfileErrorReq[];
    }
    set errors(value: ProfileErrorReq[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        corporateId?: string;
        profile?: ReturnType<typeof ProfileFormReq.prototype.toObject>;
        errors?: ReturnType<typeof ProfileErrorReq.prototype.toObject>[];
    }): ProfileDetailData {
        const message = new ProfileDetailData({});
        if (data.corporateId != null) {
            message.corporateId = data.corporateId;
        }
        if (data.profile != null) {
            message.profile = ProfileFormReq.fromObject(data.profile);
        }
        if (data.errors != null) {
            message.errors = data.errors.map(item => ProfileErrorReq.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            corporateId?: string;
            profile?: ReturnType<typeof ProfileFormReq.prototype.toObject>;
            errors?: ReturnType<typeof ProfileErrorReq.prototype.toObject>[];
        } = {};
        if (this.corporateId != null) {
            data.corporateId = this.corporateId;
        }
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        if (this.errors != null) {
            data.errors = this.errors.map((item: ProfileErrorReq) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.corporateId.length)
            writer.writeString(1, this.corporateId);
        if (this.has_profile)
            writer.writeMessage(2, this.profile, () => this.profile.serialize(writer));
        if (this.errors.length)
            writer.writeRepeatedMessage(3, this.errors, (item: ProfileErrorReq) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileDetailData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileDetailData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.corporateId = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.profile, () => message.profile = ProfileFormReq.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.errors, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ProfileErrorReq.deserialize(reader), ProfileErrorReq));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileDetailData {
        return ProfileDetailData.deserialize(bytes);
    }
}
export class ProfileError extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        msg?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        code?: number;
        msg?: string;
    }): ProfileError {
        const message = new ProfileError({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            msg?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileError {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileError();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileError {
        return ProfileError.deserialize(bytes);
    }
}
export class ProfileNotificationReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        corporateId?: string;
        walletAccount?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("corporateId" in data && data.corporateId != undefined) {
                this.corporateId = data.corporateId;
            }
            if ("walletAccount" in data && data.walletAccount != undefined) {
                this.walletAccount = data.walletAccount;
            }
        }
    }
    get corporateId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set corporateId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get walletAccount() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set walletAccount(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        corporateId?: string;
        walletAccount?: string;
    }): ProfileNotificationReq {
        const message = new ProfileNotificationReq({});
        if (data.corporateId != null) {
            message.corporateId = data.corporateId;
        }
        if (data.walletAccount != null) {
            message.walletAccount = data.walletAccount;
        }
        return message;
    }
    toObject() {
        const data: {
            corporateId?: string;
            walletAccount?: string;
        } = {};
        if (this.corporateId != null) {
            data.corporateId = this.corporateId;
        }
        if (this.walletAccount != null) {
            data.walletAccount = this.walletAccount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.corporateId.length)
            writer.writeString(1, this.corporateId);
        if (this.walletAccount.length)
            writer.writeString(2, this.walletAccount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileNotificationReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileNotificationReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.corporateId = reader.readString();
                    break;
                case 2:
                    message.walletAccount = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileNotificationReq {
        return ProfileNotificationReq.deserialize(bytes);
    }
}
export class ProfileFormReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        entityDetail?: ProfileEntityReq;
        businessDetail?: BusinessDetailsReq;
        shareholder?: ShareholderReq;
        keyPeople?: KeyPeopleReq;
        walletOpenAccountAddition?: WalletOpenAccountReq;
        corporateId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("entityDetail" in data && data.entityDetail != undefined) {
                this.entityDetail = data.entityDetail;
            }
            if ("businessDetail" in data && data.businessDetail != undefined) {
                this.businessDetail = data.businessDetail;
            }
            if ("shareholder" in data && data.shareholder != undefined) {
                this.shareholder = data.shareholder;
            }
            if ("keyPeople" in data && data.keyPeople != undefined) {
                this.keyPeople = data.keyPeople;
            }
            if ("walletOpenAccountAddition" in data && data.walletOpenAccountAddition != undefined) {
                this.walletOpenAccountAddition = data.walletOpenAccountAddition;
            }
            if ("corporateId" in data && data.corporateId != undefined) {
                this.corporateId = data.corporateId;
            }
        }
    }
    get entityDetail() {
        return pb_1.Message.getWrapperField(this, ProfileEntityReq, 1) as ProfileEntityReq;
    }
    set entityDetail(value: ProfileEntityReq) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_entityDetail() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get businessDetail() {
        return pb_1.Message.getWrapperField(this, BusinessDetailsReq, 2) as BusinessDetailsReq;
    }
    set businessDetail(value: BusinessDetailsReq) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_businessDetail() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get shareholder() {
        return pb_1.Message.getWrapperField(this, ShareholderReq, 3) as ShareholderReq;
    }
    set shareholder(value: ShareholderReq) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_shareholder() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get keyPeople() {
        return pb_1.Message.getWrapperField(this, KeyPeopleReq, 4) as KeyPeopleReq;
    }
    set keyPeople(value: KeyPeopleReq) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_keyPeople() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get walletOpenAccountAddition() {
        return pb_1.Message.getWrapperField(this, WalletOpenAccountReq, 5) as WalletOpenAccountReq;
    }
    set walletOpenAccountAddition(value: WalletOpenAccountReq) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_walletOpenAccountAddition() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get corporateId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set corporateId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        entityDetail?: ReturnType<typeof ProfileEntityReq.prototype.toObject>;
        businessDetail?: ReturnType<typeof BusinessDetailsReq.prototype.toObject>;
        shareholder?: ReturnType<typeof ShareholderReq.prototype.toObject>;
        keyPeople?: ReturnType<typeof KeyPeopleReq.prototype.toObject>;
        walletOpenAccountAddition?: ReturnType<typeof WalletOpenAccountReq.prototype.toObject>;
        corporateId?: string;
    }): ProfileFormReq {
        const message = new ProfileFormReq({});
        if (data.entityDetail != null) {
            message.entityDetail = ProfileEntityReq.fromObject(data.entityDetail);
        }
        if (data.businessDetail != null) {
            message.businessDetail = BusinessDetailsReq.fromObject(data.businessDetail);
        }
        if (data.shareholder != null) {
            message.shareholder = ShareholderReq.fromObject(data.shareholder);
        }
        if (data.keyPeople != null) {
            message.keyPeople = KeyPeopleReq.fromObject(data.keyPeople);
        }
        if (data.walletOpenAccountAddition != null) {
            message.walletOpenAccountAddition = WalletOpenAccountReq.fromObject(data.walletOpenAccountAddition);
        }
        if (data.corporateId != null) {
            message.corporateId = data.corporateId;
        }
        return message;
    }
    toObject() {
        const data: {
            entityDetail?: ReturnType<typeof ProfileEntityReq.prototype.toObject>;
            businessDetail?: ReturnType<typeof BusinessDetailsReq.prototype.toObject>;
            shareholder?: ReturnType<typeof ShareholderReq.prototype.toObject>;
            keyPeople?: ReturnType<typeof KeyPeopleReq.prototype.toObject>;
            walletOpenAccountAddition?: ReturnType<typeof WalletOpenAccountReq.prototype.toObject>;
            corporateId?: string;
        } = {};
        if (this.entityDetail != null) {
            data.entityDetail = this.entityDetail.toObject();
        }
        if (this.businessDetail != null) {
            data.businessDetail = this.businessDetail.toObject();
        }
        if (this.shareholder != null) {
            data.shareholder = this.shareholder.toObject();
        }
        if (this.keyPeople != null) {
            data.keyPeople = this.keyPeople.toObject();
        }
        if (this.walletOpenAccountAddition != null) {
            data.walletOpenAccountAddition = this.walletOpenAccountAddition.toObject();
        }
        if (this.corporateId != null) {
            data.corporateId = this.corporateId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_entityDetail)
            writer.writeMessage(1, this.entityDetail, () => this.entityDetail.serialize(writer));
        if (this.has_businessDetail)
            writer.writeMessage(2, this.businessDetail, () => this.businessDetail.serialize(writer));
        if (this.has_shareholder)
            writer.writeMessage(3, this.shareholder, () => this.shareholder.serialize(writer));
        if (this.has_keyPeople)
            writer.writeMessage(4, this.keyPeople, () => this.keyPeople.serialize(writer));
        if (this.has_walletOpenAccountAddition)
            writer.writeMessage(5, this.walletOpenAccountAddition, () => this.walletOpenAccountAddition.serialize(writer));
        if (this.corporateId.length)
            writer.writeString(6, this.corporateId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileFormReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileFormReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.entityDetail, () => message.entityDetail = ProfileEntityReq.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.businessDetail, () => message.businessDetail = BusinessDetailsReq.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.shareholder, () => message.shareholder = ShareholderReq.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.keyPeople, () => message.keyPeople = KeyPeopleReq.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.walletOpenAccountAddition, () => message.walletOpenAccountAddition = WalletOpenAccountReq.deserialize(reader));
                    break;
                case 6:
                    message.corporateId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileFormReq {
        return ProfileFormReq.deserialize(bytes);
    }
}
export class ProfileErrorReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        msg?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        code?: number;
        msg?: string;
    }): ProfileErrorReq {
        const message = new ProfileErrorReq({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            msg?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileErrorReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileErrorReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileErrorReq {
        return ProfileErrorReq.deserialize(bytes);
    }
}
export class ProfileEntityReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        businessType?: number;
        incorpPlace?: string;
        ciNumber?: string;
        brNumber?: string;
        incorpDate?: number;
        website?: string;
        regPlace?: string;
        regAddress?: string;
        operatingPlace?: string;
        operatingAddress?: string;
        nameEn?: string;
        nameZh?: string;
        isFinancialInstitute?: number;
        financialRegulatorPlace?: string;
        financialRegulator?: string;
        financialLicenseType?: string;
        isListed?: number;
        listingPlace?: string;
        listingExchange?: string;
        stockCode?: string;
        isGovOwned?: number;
        ownedGovPlace?: string;
        ciFileKey?: string;
        brFileKey?: string;
        paFileKey?: string;
        maFileKey?: string;
        coiFileKey?: string;
        crUpdateFileKey?: string;
        regulatedProofKey?: string;
        ciFileUrl?: string;
        brFileUrl?: string;
        paFileUrl?: string;
        maFileUrl?: string;
        coiFileUrl?: string;
        crUpdateFileUrl?: string;
        regulatedProofUrl?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("businessType" in data && data.businessType != undefined) {
                this.businessType = data.businessType;
            }
            if ("incorpPlace" in data && data.incorpPlace != undefined) {
                this.incorpPlace = data.incorpPlace;
            }
            if ("ciNumber" in data && data.ciNumber != undefined) {
                this.ciNumber = data.ciNumber;
            }
            if ("brNumber" in data && data.brNumber != undefined) {
                this.brNumber = data.brNumber;
            }
            if ("incorpDate" in data && data.incorpDate != undefined) {
                this.incorpDate = data.incorpDate;
            }
            if ("website" in data && data.website != undefined) {
                this.website = data.website;
            }
            if ("regPlace" in data && data.regPlace != undefined) {
                this.regPlace = data.regPlace;
            }
            if ("regAddress" in data && data.regAddress != undefined) {
                this.regAddress = data.regAddress;
            }
            if ("operatingPlace" in data && data.operatingPlace != undefined) {
                this.operatingPlace = data.operatingPlace;
            }
            if ("operatingAddress" in data && data.operatingAddress != undefined) {
                this.operatingAddress = data.operatingAddress;
            }
            if ("nameEn" in data && data.nameEn != undefined) {
                this.nameEn = data.nameEn;
            }
            if ("nameZh" in data && data.nameZh != undefined) {
                this.nameZh = data.nameZh;
            }
            if ("isFinancialInstitute" in data && data.isFinancialInstitute != undefined) {
                this.isFinancialInstitute = data.isFinancialInstitute;
            }
            if ("financialRegulatorPlace" in data && data.financialRegulatorPlace != undefined) {
                this.financialRegulatorPlace = data.financialRegulatorPlace;
            }
            if ("financialRegulator" in data && data.financialRegulator != undefined) {
                this.financialRegulator = data.financialRegulator;
            }
            if ("financialLicenseType" in data && data.financialLicenseType != undefined) {
                this.financialLicenseType = data.financialLicenseType;
            }
            if ("isListed" in data && data.isListed != undefined) {
                this.isListed = data.isListed;
            }
            if ("listingPlace" in data && data.listingPlace != undefined) {
                this.listingPlace = data.listingPlace;
            }
            if ("listingExchange" in data && data.listingExchange != undefined) {
                this.listingExchange = data.listingExchange;
            }
            if ("stockCode" in data && data.stockCode != undefined) {
                this.stockCode = data.stockCode;
            }
            if ("isGovOwned" in data && data.isGovOwned != undefined) {
                this.isGovOwned = data.isGovOwned;
            }
            if ("ownedGovPlace" in data && data.ownedGovPlace != undefined) {
                this.ownedGovPlace = data.ownedGovPlace;
            }
            if ("ciFileKey" in data && data.ciFileKey != undefined) {
                this.ciFileKey = data.ciFileKey;
            }
            if ("brFileKey" in data && data.brFileKey != undefined) {
                this.brFileKey = data.brFileKey;
            }
            if ("paFileKey" in data && data.paFileKey != undefined) {
                this.paFileKey = data.paFileKey;
            }
            if ("maFileKey" in data && data.maFileKey != undefined) {
                this.maFileKey = data.maFileKey;
            }
            if ("coiFileKey" in data && data.coiFileKey != undefined) {
                this.coiFileKey = data.coiFileKey;
            }
            if ("crUpdateFileKey" in data && data.crUpdateFileKey != undefined) {
                this.crUpdateFileKey = data.crUpdateFileKey;
            }
            if ("regulatedProofKey" in data && data.regulatedProofKey != undefined) {
                this.regulatedProofKey = data.regulatedProofKey;
            }
            if ("ciFileUrl" in data && data.ciFileUrl != undefined) {
                this.ciFileUrl = data.ciFileUrl;
            }
            if ("brFileUrl" in data && data.brFileUrl != undefined) {
                this.brFileUrl = data.brFileUrl;
            }
            if ("paFileUrl" in data && data.paFileUrl != undefined) {
                this.paFileUrl = data.paFileUrl;
            }
            if ("maFileUrl" in data && data.maFileUrl != undefined) {
                this.maFileUrl = data.maFileUrl;
            }
            if ("coiFileUrl" in data && data.coiFileUrl != undefined) {
                this.coiFileUrl = data.coiFileUrl;
            }
            if ("crUpdateFileUrl" in data && data.crUpdateFileUrl != undefined) {
                this.crUpdateFileUrl = data.crUpdateFileUrl;
            }
            if ("regulatedProofUrl" in data && data.regulatedProofUrl != undefined) {
                this.regulatedProofUrl = data.regulatedProofUrl;
            }
        }
    }
    get businessType() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set businessType(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get incorpPlace() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set incorpPlace(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get ciNumber() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set ciNumber(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get brNumber() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set brNumber(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get incorpDate() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set incorpDate(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get website() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set website(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get regPlace() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set regPlace(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get regAddress() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set regAddress(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get operatingPlace() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set operatingPlace(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get operatingAddress() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set operatingAddress(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get nameEn() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set nameEn(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get nameZh() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set nameZh(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get isFinancialInstitute() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set isFinancialInstitute(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get financialRegulatorPlace() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set financialRegulatorPlace(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get financialRegulator() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set financialRegulator(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get financialLicenseType() {
        return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
    }
    set financialLicenseType(value: string) {
        pb_1.Message.setField(this, 16, value);
    }
    get isListed() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set isListed(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get listingPlace() {
        return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
    }
    set listingPlace(value: string) {
        pb_1.Message.setField(this, 18, value);
    }
    get listingExchange() {
        return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
    }
    set listingExchange(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get stockCode() {
        return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
    }
    set stockCode(value: string) {
        pb_1.Message.setField(this, 20, value);
    }
    get isGovOwned() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set isGovOwned(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get ownedGovPlace() {
        return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
    }
    set ownedGovPlace(value: string) {
        pb_1.Message.setField(this, 22, value);
    }
    get ciFileKey() {
        return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
    }
    set ciFileKey(value: string) {
        pb_1.Message.setField(this, 23, value);
    }
    get brFileKey() {
        return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
    }
    set brFileKey(value: string) {
        pb_1.Message.setField(this, 24, value);
    }
    get paFileKey() {
        return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
    }
    set paFileKey(value: string) {
        pb_1.Message.setField(this, 25, value);
    }
    get maFileKey() {
        return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
    }
    set maFileKey(value: string) {
        pb_1.Message.setField(this, 26, value);
    }
    get coiFileKey() {
        return pb_1.Message.getFieldWithDefault(this, 27, "") as string;
    }
    set coiFileKey(value: string) {
        pb_1.Message.setField(this, 27, value);
    }
    get crUpdateFileKey() {
        return pb_1.Message.getFieldWithDefault(this, 33, "") as string;
    }
    set crUpdateFileKey(value: string) {
        pb_1.Message.setField(this, 33, value);
    }
    get regulatedProofKey() {
        return pb_1.Message.getFieldWithDefault(this, 34, "") as string;
    }
    set regulatedProofKey(value: string) {
        pb_1.Message.setField(this, 34, value);
    }
    get ciFileUrl() {
        return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
    }
    set ciFileUrl(value: string) {
        pb_1.Message.setField(this, 28, value);
    }
    get brFileUrl() {
        return pb_1.Message.getFieldWithDefault(this, 29, "") as string;
    }
    set brFileUrl(value: string) {
        pb_1.Message.setField(this, 29, value);
    }
    get paFileUrl() {
        return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
    }
    set paFileUrl(value: string) {
        pb_1.Message.setField(this, 30, value);
    }
    get maFileUrl() {
        return pb_1.Message.getFieldWithDefault(this, 31, "") as string;
    }
    set maFileUrl(value: string) {
        pb_1.Message.setField(this, 31, value);
    }
    get coiFileUrl() {
        return pb_1.Message.getFieldWithDefault(this, 32, "") as string;
    }
    set coiFileUrl(value: string) {
        pb_1.Message.setField(this, 32, value);
    }
    get crUpdateFileUrl() {
        return pb_1.Message.getFieldWithDefault(this, 35, "") as string;
    }
    set crUpdateFileUrl(value: string) {
        pb_1.Message.setField(this, 35, value);
    }
    get regulatedProofUrl() {
        return pb_1.Message.getFieldWithDefault(this, 36, "") as string;
    }
    set regulatedProofUrl(value: string) {
        pb_1.Message.setField(this, 36, value);
    }
    static fromObject(data: {
        businessType?: number;
        incorpPlace?: string;
        ciNumber?: string;
        brNumber?: string;
        incorpDate?: number;
        website?: string;
        regPlace?: string;
        regAddress?: string;
        operatingPlace?: string;
        operatingAddress?: string;
        nameEn?: string;
        nameZh?: string;
        isFinancialInstitute?: number;
        financialRegulatorPlace?: string;
        financialRegulator?: string;
        financialLicenseType?: string;
        isListed?: number;
        listingPlace?: string;
        listingExchange?: string;
        stockCode?: string;
        isGovOwned?: number;
        ownedGovPlace?: string;
        ciFileKey?: string;
        brFileKey?: string;
        paFileKey?: string;
        maFileKey?: string;
        coiFileKey?: string;
        crUpdateFileKey?: string;
        regulatedProofKey?: string;
        ciFileUrl?: string;
        brFileUrl?: string;
        paFileUrl?: string;
        maFileUrl?: string;
        coiFileUrl?: string;
        crUpdateFileUrl?: string;
        regulatedProofUrl?: string;
    }): ProfileEntityReq {
        const message = new ProfileEntityReq({});
        if (data.businessType != null) {
            message.businessType = data.businessType;
        }
        if (data.incorpPlace != null) {
            message.incorpPlace = data.incorpPlace;
        }
        if (data.ciNumber != null) {
            message.ciNumber = data.ciNumber;
        }
        if (data.brNumber != null) {
            message.brNumber = data.brNumber;
        }
        if (data.incorpDate != null) {
            message.incorpDate = data.incorpDate;
        }
        if (data.website != null) {
            message.website = data.website;
        }
        if (data.regPlace != null) {
            message.regPlace = data.regPlace;
        }
        if (data.regAddress != null) {
            message.regAddress = data.regAddress;
        }
        if (data.operatingPlace != null) {
            message.operatingPlace = data.operatingPlace;
        }
        if (data.operatingAddress != null) {
            message.operatingAddress = data.operatingAddress;
        }
        if (data.nameEn != null) {
            message.nameEn = data.nameEn;
        }
        if (data.nameZh != null) {
            message.nameZh = data.nameZh;
        }
        if (data.isFinancialInstitute != null) {
            message.isFinancialInstitute = data.isFinancialInstitute;
        }
        if (data.financialRegulatorPlace != null) {
            message.financialRegulatorPlace = data.financialRegulatorPlace;
        }
        if (data.financialRegulator != null) {
            message.financialRegulator = data.financialRegulator;
        }
        if (data.financialLicenseType != null) {
            message.financialLicenseType = data.financialLicenseType;
        }
        if (data.isListed != null) {
            message.isListed = data.isListed;
        }
        if (data.listingPlace != null) {
            message.listingPlace = data.listingPlace;
        }
        if (data.listingExchange != null) {
            message.listingExchange = data.listingExchange;
        }
        if (data.stockCode != null) {
            message.stockCode = data.stockCode;
        }
        if (data.isGovOwned != null) {
            message.isGovOwned = data.isGovOwned;
        }
        if (data.ownedGovPlace != null) {
            message.ownedGovPlace = data.ownedGovPlace;
        }
        if (data.ciFileKey != null) {
            message.ciFileKey = data.ciFileKey;
        }
        if (data.brFileKey != null) {
            message.brFileKey = data.brFileKey;
        }
        if (data.paFileKey != null) {
            message.paFileKey = data.paFileKey;
        }
        if (data.maFileKey != null) {
            message.maFileKey = data.maFileKey;
        }
        if (data.coiFileKey != null) {
            message.coiFileKey = data.coiFileKey;
        }
        if (data.crUpdateFileKey != null) {
            message.crUpdateFileKey = data.crUpdateFileKey;
        }
        if (data.regulatedProofKey != null) {
            message.regulatedProofKey = data.regulatedProofKey;
        }
        if (data.ciFileUrl != null) {
            message.ciFileUrl = data.ciFileUrl;
        }
        if (data.brFileUrl != null) {
            message.brFileUrl = data.brFileUrl;
        }
        if (data.paFileUrl != null) {
            message.paFileUrl = data.paFileUrl;
        }
        if (data.maFileUrl != null) {
            message.maFileUrl = data.maFileUrl;
        }
        if (data.coiFileUrl != null) {
            message.coiFileUrl = data.coiFileUrl;
        }
        if (data.crUpdateFileUrl != null) {
            message.crUpdateFileUrl = data.crUpdateFileUrl;
        }
        if (data.regulatedProofUrl != null) {
            message.regulatedProofUrl = data.regulatedProofUrl;
        }
        return message;
    }
    toObject() {
        const data: {
            businessType?: number;
            incorpPlace?: string;
            ciNumber?: string;
            brNumber?: string;
            incorpDate?: number;
            website?: string;
            regPlace?: string;
            regAddress?: string;
            operatingPlace?: string;
            operatingAddress?: string;
            nameEn?: string;
            nameZh?: string;
            isFinancialInstitute?: number;
            financialRegulatorPlace?: string;
            financialRegulator?: string;
            financialLicenseType?: string;
            isListed?: number;
            listingPlace?: string;
            listingExchange?: string;
            stockCode?: string;
            isGovOwned?: number;
            ownedGovPlace?: string;
            ciFileKey?: string;
            brFileKey?: string;
            paFileKey?: string;
            maFileKey?: string;
            coiFileKey?: string;
            crUpdateFileKey?: string;
            regulatedProofKey?: string;
            ciFileUrl?: string;
            brFileUrl?: string;
            paFileUrl?: string;
            maFileUrl?: string;
            coiFileUrl?: string;
            crUpdateFileUrl?: string;
            regulatedProofUrl?: string;
        } = {};
        if (this.businessType != null) {
            data.businessType = this.businessType;
        }
        if (this.incorpPlace != null) {
            data.incorpPlace = this.incorpPlace;
        }
        if (this.ciNumber != null) {
            data.ciNumber = this.ciNumber;
        }
        if (this.brNumber != null) {
            data.brNumber = this.brNumber;
        }
        if (this.incorpDate != null) {
            data.incorpDate = this.incorpDate;
        }
        if (this.website != null) {
            data.website = this.website;
        }
        if (this.regPlace != null) {
            data.regPlace = this.regPlace;
        }
        if (this.regAddress != null) {
            data.regAddress = this.regAddress;
        }
        if (this.operatingPlace != null) {
            data.operatingPlace = this.operatingPlace;
        }
        if (this.operatingAddress != null) {
            data.operatingAddress = this.operatingAddress;
        }
        if (this.nameEn != null) {
            data.nameEn = this.nameEn;
        }
        if (this.nameZh != null) {
            data.nameZh = this.nameZh;
        }
        if (this.isFinancialInstitute != null) {
            data.isFinancialInstitute = this.isFinancialInstitute;
        }
        if (this.financialRegulatorPlace != null) {
            data.financialRegulatorPlace = this.financialRegulatorPlace;
        }
        if (this.financialRegulator != null) {
            data.financialRegulator = this.financialRegulator;
        }
        if (this.financialLicenseType != null) {
            data.financialLicenseType = this.financialLicenseType;
        }
        if (this.isListed != null) {
            data.isListed = this.isListed;
        }
        if (this.listingPlace != null) {
            data.listingPlace = this.listingPlace;
        }
        if (this.listingExchange != null) {
            data.listingExchange = this.listingExchange;
        }
        if (this.stockCode != null) {
            data.stockCode = this.stockCode;
        }
        if (this.isGovOwned != null) {
            data.isGovOwned = this.isGovOwned;
        }
        if (this.ownedGovPlace != null) {
            data.ownedGovPlace = this.ownedGovPlace;
        }
        if (this.ciFileKey != null) {
            data.ciFileKey = this.ciFileKey;
        }
        if (this.brFileKey != null) {
            data.brFileKey = this.brFileKey;
        }
        if (this.paFileKey != null) {
            data.paFileKey = this.paFileKey;
        }
        if (this.maFileKey != null) {
            data.maFileKey = this.maFileKey;
        }
        if (this.coiFileKey != null) {
            data.coiFileKey = this.coiFileKey;
        }
        if (this.crUpdateFileKey != null) {
            data.crUpdateFileKey = this.crUpdateFileKey;
        }
        if (this.regulatedProofKey != null) {
            data.regulatedProofKey = this.regulatedProofKey;
        }
        if (this.ciFileUrl != null) {
            data.ciFileUrl = this.ciFileUrl;
        }
        if (this.brFileUrl != null) {
            data.brFileUrl = this.brFileUrl;
        }
        if (this.paFileUrl != null) {
            data.paFileUrl = this.paFileUrl;
        }
        if (this.maFileUrl != null) {
            data.maFileUrl = this.maFileUrl;
        }
        if (this.coiFileUrl != null) {
            data.coiFileUrl = this.coiFileUrl;
        }
        if (this.crUpdateFileUrl != null) {
            data.crUpdateFileUrl = this.crUpdateFileUrl;
        }
        if (this.regulatedProofUrl != null) {
            data.regulatedProofUrl = this.regulatedProofUrl;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.businessType != 0)
            writer.writeInt32(1, this.businessType);
        if (this.incorpPlace.length)
            writer.writeString(2, this.incorpPlace);
        if (this.ciNumber.length)
            writer.writeString(3, this.ciNumber);
        if (this.brNumber.length)
            writer.writeString(4, this.brNumber);
        if (this.incorpDate != 0)
            writer.writeInt64(5, this.incorpDate);
        if (this.website.length)
            writer.writeString(6, this.website);
        if (this.regPlace.length)
            writer.writeString(7, this.regPlace);
        if (this.regAddress.length)
            writer.writeString(8, this.regAddress);
        if (this.operatingPlace.length)
            writer.writeString(9, this.operatingPlace);
        if (this.operatingAddress.length)
            writer.writeString(10, this.operatingAddress);
        if (this.nameEn.length)
            writer.writeString(11, this.nameEn);
        if (this.nameZh.length)
            writer.writeString(12, this.nameZh);
        if (this.isFinancialInstitute != 0)
            writer.writeInt32(13, this.isFinancialInstitute);
        if (this.financialRegulatorPlace.length)
            writer.writeString(14, this.financialRegulatorPlace);
        if (this.financialRegulator.length)
            writer.writeString(15, this.financialRegulator);
        if (this.financialLicenseType.length)
            writer.writeString(16, this.financialLicenseType);
        if (this.isListed != 0)
            writer.writeInt32(17, this.isListed);
        if (this.listingPlace.length)
            writer.writeString(18, this.listingPlace);
        if (this.listingExchange.length)
            writer.writeString(19, this.listingExchange);
        if (this.stockCode.length)
            writer.writeString(20, this.stockCode);
        if (this.isGovOwned != 0)
            writer.writeInt32(21, this.isGovOwned);
        if (this.ownedGovPlace.length)
            writer.writeString(22, this.ownedGovPlace);
        if (this.ciFileKey.length)
            writer.writeString(23, this.ciFileKey);
        if (this.brFileKey.length)
            writer.writeString(24, this.brFileKey);
        if (this.paFileKey.length)
            writer.writeString(25, this.paFileKey);
        if (this.maFileKey.length)
            writer.writeString(26, this.maFileKey);
        if (this.coiFileKey.length)
            writer.writeString(27, this.coiFileKey);
        if (this.crUpdateFileKey.length)
            writer.writeString(33, this.crUpdateFileKey);
        if (this.regulatedProofKey.length)
            writer.writeString(34, this.regulatedProofKey);
        if (this.ciFileUrl.length)
            writer.writeString(28, this.ciFileUrl);
        if (this.brFileUrl.length)
            writer.writeString(29, this.brFileUrl);
        if (this.paFileUrl.length)
            writer.writeString(30, this.paFileUrl);
        if (this.maFileUrl.length)
            writer.writeString(31, this.maFileUrl);
        if (this.coiFileUrl.length)
            writer.writeString(32, this.coiFileUrl);
        if (this.crUpdateFileUrl.length)
            writer.writeString(35, this.crUpdateFileUrl);
        if (this.regulatedProofUrl.length)
            writer.writeString(36, this.regulatedProofUrl);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileEntityReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileEntityReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.businessType = reader.readInt32();
                    break;
                case 2:
                    message.incorpPlace = reader.readString();
                    break;
                case 3:
                    message.ciNumber = reader.readString();
                    break;
                case 4:
                    message.brNumber = reader.readString();
                    break;
                case 5:
                    message.incorpDate = reader.readInt64();
                    break;
                case 6:
                    message.website = reader.readString();
                    break;
                case 7:
                    message.regPlace = reader.readString();
                    break;
                case 8:
                    message.regAddress = reader.readString();
                    break;
                case 9:
                    message.operatingPlace = reader.readString();
                    break;
                case 10:
                    message.operatingAddress = reader.readString();
                    break;
                case 11:
                    message.nameEn = reader.readString();
                    break;
                case 12:
                    message.nameZh = reader.readString();
                    break;
                case 13:
                    message.isFinancialInstitute = reader.readInt32();
                    break;
                case 14:
                    message.financialRegulatorPlace = reader.readString();
                    break;
                case 15:
                    message.financialRegulator = reader.readString();
                    break;
                case 16:
                    message.financialLicenseType = reader.readString();
                    break;
                case 17:
                    message.isListed = reader.readInt32();
                    break;
                case 18:
                    message.listingPlace = reader.readString();
                    break;
                case 19:
                    message.listingExchange = reader.readString();
                    break;
                case 20:
                    message.stockCode = reader.readString();
                    break;
                case 21:
                    message.isGovOwned = reader.readInt32();
                    break;
                case 22:
                    message.ownedGovPlace = reader.readString();
                    break;
                case 23:
                    message.ciFileKey = reader.readString();
                    break;
                case 24:
                    message.brFileKey = reader.readString();
                    break;
                case 25:
                    message.paFileKey = reader.readString();
                    break;
                case 26:
                    message.maFileKey = reader.readString();
                    break;
                case 27:
                    message.coiFileKey = reader.readString();
                    break;
                case 33:
                    message.crUpdateFileKey = reader.readString();
                    break;
                case 34:
                    message.regulatedProofKey = reader.readString();
                    break;
                case 28:
                    message.ciFileUrl = reader.readString();
                    break;
                case 29:
                    message.brFileUrl = reader.readString();
                    break;
                case 30:
                    message.paFileUrl = reader.readString();
                    break;
                case 31:
                    message.maFileUrl = reader.readString();
                    break;
                case 32:
                    message.coiFileUrl = reader.readString();
                    break;
                case 35:
                    message.crUpdateFileUrl = reader.readString();
                    break;
                case 36:
                    message.regulatedProofUrl = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProfileEntityReq {
        return ProfileEntityReq.deserialize(bytes);
    }
}
export class BusinessDetailsReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        list?: BusinessDetailsDtoReq[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, BusinessDetailsDtoReq, 1) as BusinessDetailsDtoReq[];
    }
    set list(value: BusinessDetailsDtoReq[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        list?: ReturnType<typeof BusinessDetailsDtoReq.prototype.toObject>[];
    }): BusinessDetailsReq {
        const message = new BusinessDetailsReq({});
        if (data.list != null) {
            message.list = data.list.map(item => BusinessDetailsDtoReq.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            list?: ReturnType<typeof BusinessDetailsDtoReq.prototype.toObject>[];
        } = {};
        if (this.list != null) {
            data.list = this.list.map((item: BusinessDetailsDtoReq) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.list.length)
            writer.writeRepeatedMessage(1, this.list, (item: BusinessDetailsDtoReq) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BusinessDetailsReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BusinessDetailsReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BusinessDetailsDtoReq.deserialize(reader), BusinessDetailsDtoReq));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BusinessDetailsReq {
        return BusinessDetailsReq.deserialize(bytes);
    }
}
export class BusinessDetailsDtoReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        yearsInBusiness?: string;
        businessLocations?: string[];
        lastYearSales?: string;
        industryCode?: string;
        subIndustryCode?: string;
        industryDetails?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("yearsInBusiness" in data && data.yearsInBusiness != undefined) {
                this.yearsInBusiness = data.yearsInBusiness;
            }
            if ("businessLocations" in data && data.businessLocations != undefined) {
                this.businessLocations = data.businessLocations;
            }
            if ("lastYearSales" in data && data.lastYearSales != undefined) {
                this.lastYearSales = data.lastYearSales;
            }
            if ("industryCode" in data && data.industryCode != undefined) {
                this.industryCode = data.industryCode;
            }
            if ("subIndustryCode" in data && data.subIndustryCode != undefined) {
                this.subIndustryCode = data.subIndustryCode;
            }
            if ("industryDetails" in data && data.industryDetails != undefined) {
                this.industryDetails = data.industryDetails;
            }
        }
    }
    get yearsInBusiness() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set yearsInBusiness(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get businessLocations() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set businessLocations(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get lastYearSales() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set lastYearSales(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get industryCode() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set industryCode(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get subIndustryCode() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set subIndustryCode(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get industryDetails() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set industryDetails(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        yearsInBusiness?: string;
        businessLocations?: string[];
        lastYearSales?: string;
        industryCode?: string;
        subIndustryCode?: string;
        industryDetails?: string;
    }): BusinessDetailsDtoReq {
        const message = new BusinessDetailsDtoReq({});
        if (data.yearsInBusiness != null) {
            message.yearsInBusiness = data.yearsInBusiness;
        }
        if (data.businessLocations != null) {
            message.businessLocations = data.businessLocations;
        }
        if (data.lastYearSales != null) {
            message.lastYearSales = data.lastYearSales;
        }
        if (data.industryCode != null) {
            message.industryCode = data.industryCode;
        }
        if (data.subIndustryCode != null) {
            message.subIndustryCode = data.subIndustryCode;
        }
        if (data.industryDetails != null) {
            message.industryDetails = data.industryDetails;
        }
        return message;
    }
    toObject() {
        const data: {
            yearsInBusiness?: string;
            businessLocations?: string[];
            lastYearSales?: string;
            industryCode?: string;
            subIndustryCode?: string;
            industryDetails?: string;
        } = {};
        if (this.yearsInBusiness != null) {
            data.yearsInBusiness = this.yearsInBusiness;
        }
        if (this.businessLocations != null) {
            data.businessLocations = this.businessLocations;
        }
        if (this.lastYearSales != null) {
            data.lastYearSales = this.lastYearSales;
        }
        if (this.industryCode != null) {
            data.industryCode = this.industryCode;
        }
        if (this.subIndustryCode != null) {
            data.subIndustryCode = this.subIndustryCode;
        }
        if (this.industryDetails != null) {
            data.industryDetails = this.industryDetails;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.yearsInBusiness.length)
            writer.writeString(1, this.yearsInBusiness);
        if (this.businessLocations.length)
            writer.writeRepeatedString(2, this.businessLocations);
        if (this.lastYearSales.length)
            writer.writeString(3, this.lastYearSales);
        if (this.industryCode.length)
            writer.writeString(4, this.industryCode);
        if (this.subIndustryCode.length)
            writer.writeString(5, this.subIndustryCode);
        if (this.industryDetails.length)
            writer.writeString(6, this.industryDetails);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BusinessDetailsDtoReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BusinessDetailsDtoReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.yearsInBusiness = reader.readString();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                case 3:
                    message.lastYearSales = reader.readString();
                    break;
                case 4:
                    message.industryCode = reader.readString();
                    break;
                case 5:
                    message.subIndustryCode = reader.readString();
                    break;
                case 6:
                    message.industryDetails = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BusinessDetailsDtoReq {
        return BusinessDetailsDtoReq.deserialize(bytes);
    }
}
export class ShareholderReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        list?: ShareholdersDtoReq[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get list() {
        return pb_1.Message.getRepeatedWrapperField(this, ShareholdersDtoReq, 1) as ShareholdersDtoReq[];
    }
    set list(value: ShareholdersDtoReq[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        list?: ReturnType<typeof ShareholdersDtoReq.prototype.toObject>[];
    }): ShareholderReq {
        const message = new ShareholderReq({});
        if (data.list != null) {
            message.list = data.list.map(item => ShareholdersDtoReq.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            list?: ReturnType<typeof ShareholdersDtoReq.prototype.toObject>[];
        } = {};
        if (this.list != null) {
            data.list = this.list.map((item: ShareholdersDtoReq) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.list.length)
            writer.writeRepeatedMessage(1, this.list, (item: ShareholdersDtoReq) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShareholderReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShareholderReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ShareholdersDtoReq.deserialize(reader), ShareholdersDtoReq));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShareholderReq {
        return ShareholderReq.deserialize(bytes);
    }
}
export class ShareholdersDtoReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        shareholderId?: number;
        shareholderType?: number;
        ownedSharesNumber?: number;
        totalShares?: number;
        ownedSharesPercent?: number;
        level?: number;
        sort?: number;
        parentId?: number;
        firstNameEn?: string;
        lastNameEn?: string;
        nameZh?: string;
        companyNameEn?: string;
        companyNameZh?: string;
        isFinancialInstitute?: number;
        financialRegulatorPlace?: string;
        financialRegulator?: string;
        financialLicenseType?: string;
        isListed?: number;
        listingPlace?: string;
        listingExchange?: string;
        stockCode?: string;
        isGovOwned?: number;
        ownedGovPlace?: string;
        sameId?: number;
        businessType?: number;
        incorpPlace?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("shareholderId" in data && data.shareholderId != undefined) {
                this.shareholderId = data.shareholderId;
            }
            if ("shareholderType" in data && data.shareholderType != undefined) {
                this.shareholderType = data.shareholderType;
            }
            if ("ownedSharesNumber" in data && data.ownedSharesNumber != undefined) {
                this.ownedSharesNumber = data.ownedSharesNumber;
            }
            if ("totalShares" in data && data.totalShares != undefined) {
                this.totalShares = data.totalShares;
            }
            if ("ownedSharesPercent" in data && data.ownedSharesPercent != undefined) {
                this.ownedSharesPercent = data.ownedSharesPercent;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("sort" in data && data.sort != undefined) {
                this.sort = data.sort;
            }
            if ("parentId" in data && data.parentId != undefined) {
                this.parentId = data.parentId;
            }
            if ("firstNameEn" in data && data.firstNameEn != undefined) {
                this.firstNameEn = data.firstNameEn;
            }
            if ("lastNameEn" in data && data.lastNameEn != undefined) {
                this.lastNameEn = data.lastNameEn;
            }
            if ("nameZh" in data && data.nameZh != undefined) {
                this.nameZh = data.nameZh;
            }
            if ("companyNameEn" in data && data.companyNameEn != undefined) {
                this.companyNameEn = data.companyNameEn;
            }
            if ("companyNameZh" in data && data.companyNameZh != undefined) {
                this.companyNameZh = data.companyNameZh;
            }
            if ("isFinancialInstitute" in data && data.isFinancialInstitute != undefined) {
                this.isFinancialInstitute = data.isFinancialInstitute;
            }
            if ("financialRegulatorPlace" in data && data.financialRegulatorPlace != undefined) {
                this.financialRegulatorPlace = data.financialRegulatorPlace;
            }
            if ("financialRegulator" in data && data.financialRegulator != undefined) {
                this.financialRegulator = data.financialRegulator;
            }
            if ("financialLicenseType" in data && data.financialLicenseType != undefined) {
                this.financialLicenseType = data.financialLicenseType;
            }
            if ("isListed" in data && data.isListed != undefined) {
                this.isListed = data.isListed;
            }
            if ("listingPlace" in data && data.listingPlace != undefined) {
                this.listingPlace = data.listingPlace;
            }
            if ("listingExchange" in data && data.listingExchange != undefined) {
                this.listingExchange = data.listingExchange;
            }
            if ("stockCode" in data && data.stockCode != undefined) {
                this.stockCode = data.stockCode;
            }
            if ("isGovOwned" in data && data.isGovOwned != undefined) {
                this.isGovOwned = data.isGovOwned;
            }
            if ("ownedGovPlace" in data && data.ownedGovPlace != undefined) {
                this.ownedGovPlace = data.ownedGovPlace;
            }
            if ("sameId" in data && data.sameId != undefined) {
                this.sameId = data.sameId;
            }
            if ("businessType" in data && data.businessType != undefined) {
                this.businessType = data.businessType;
            }
            if ("incorpPlace" in data && data.incorpPlace != undefined) {
                this.incorpPlace = data.incorpPlace;
            }
        }
    }
    get shareholderId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set shareholderId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get shareholderType() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set shareholderType(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get ownedSharesNumber() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set ownedSharesNumber(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get totalShares() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set totalShares(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get ownedSharesPercent() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set ownedSharesPercent(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set level(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get sort() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set sort(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get parentId() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set parentId(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get firstNameEn() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set firstNameEn(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get lastNameEn() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set lastNameEn(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get nameZh() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set nameZh(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get companyNameEn() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set companyNameEn(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get companyNameZh() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set companyNameZh(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get isFinancialInstitute() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set isFinancialInstitute(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get financialRegulatorPlace() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set financialRegulatorPlace(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get financialRegulator() {
        return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
    }
    set financialRegulator(value: string) {
        pb_1.Message.setField(this, 16, value);
    }
    get financialLicenseType() {
        return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
    }
    set financialLicenseType(value: string) {
        pb_1.Message.setField(this, 17, value);
    }
    get isListed() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set isListed(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get listingPlace() {
        return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
    }
    set listingPlace(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get listingExchange() {
        return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
    }
    set listingExchange(value: string) {
        pb_1.Message.setField(this, 20, value);
    }
    get stockCode() {
        return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
    }
    set stockCode(value: string) {
        pb_1.Message.setField(this, 21, value);
    }
    get isGovOwned() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set isGovOwned(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    get ownedGovPlace() {
        return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
    }
    set ownedGovPlace(value: string) {
        pb_1.Message.setField(this, 23, value);
    }
    get sameId() {
        return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
    }
    set sameId(value: number) {
        pb_1.Message.setField(this, 24, value);
    }
    get businessType() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
    }
    set businessType(value: number) {
        pb_1.Message.setField(this, 25, value);
    }
    get incorpPlace() {
        return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
    }
    set incorpPlace(value: string) {
        pb_1.Message.setField(this, 26, value);
    }
    static fromObject(data: {
        shareholderId?: number;
        shareholderType?: number;
        ownedSharesNumber?: number;
        totalShares?: number;
        ownedSharesPercent?: number;
        level?: number;
        sort?: number;
        parentId?: number;
        firstNameEn?: string;
        lastNameEn?: string;
        nameZh?: string;
        companyNameEn?: string;
        companyNameZh?: string;
        isFinancialInstitute?: number;
        financialRegulatorPlace?: string;
        financialRegulator?: string;
        financialLicenseType?: string;
        isListed?: number;
        listingPlace?: string;
        listingExchange?: string;
        stockCode?: string;
        isGovOwned?: number;
        ownedGovPlace?: string;
        sameId?: number;
        businessType?: number;
        incorpPlace?: string;
    }): ShareholdersDtoReq {
        const message = new ShareholdersDtoReq({});
        if (data.shareholderId != null) {
            message.shareholderId = data.shareholderId;
        }
        if (data.shareholderType != null) {
            message.shareholderType = data.shareholderType;
        }
        if (data.ownedSharesNumber != null) {
            message.ownedSharesNumber = data.ownedSharesNumber;
        }
        if (data.totalShares != null) {
            message.totalShares = data.totalShares;
        }
        if (data.ownedSharesPercent != null) {
            message.ownedSharesPercent = data.ownedSharesPercent;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.sort != null) {
            message.sort = data.sort;
        }
        if (data.parentId != null) {
            message.parentId = data.parentId;
        }
        if (data.firstNameEn != null) {
            message.firstNameEn = data.firstNameEn;
        }
        if (data.lastNameEn != null) {
            message.lastNameEn = data.lastNameEn;
        }
        if (data.nameZh != null) {
            message.nameZh = data.nameZh;
        }
        if (data.companyNameEn != null) {
            message.companyNameEn = data.companyNameEn;
        }
        if (data.companyNameZh != null) {
            message.companyNameZh = data.companyNameZh;
        }
        if (data.isFinancialInstitute != null) {
            message.isFinancialInstitute = data.isFinancialInstitute;
        }
        if (data.financialRegulatorPlace != null) {
            message.financialRegulatorPlace = data.financialRegulatorPlace;
        }
        if (data.financialRegulator != null) {
            message.financialRegulator = data.financialRegulator;
        }
        if (data.financialLicenseType != null) {
            message.financialLicenseType = data.financialLicenseType;
        }
        if (data.isListed != null) {
            message.isListed = data.isListed;
        }
        if (data.listingPlace != null) {
            message.listingPlace = data.listingPlace;
        }
        if (data.listingExchange != null) {
            message.listingExchange = data.listingExchange;
        }
        if (data.stockCode != null) {
            message.stockCode = data.stockCode;
        }
        if (data.isGovOwned != null) {
            message.isGovOwned = data.isGovOwned;
        }
        if (data.ownedGovPlace != null) {
            message.ownedGovPlace = data.ownedGovPlace;
        }
        if (data.sameId != null) {
            message.sameId = data.sameId;
        }
        if (data.businessType != null) {
            message.businessType = data.businessType;
        }
        if (data.incorpPlace != null) {
            message.incorpPlace = data.incorpPlace;
        }
        return message;
    }
    toObject() {
        const data: {
            shareholderId?: number;
            shareholderType?: number;
            ownedSharesNumber?: number;
            totalShares?: number;
            ownedSharesPercent?: number;
            level?: number;
            sort?: number;
            parentId?: number;
            firstNameEn?: string;
            lastNameEn?: string;
            nameZh?: string;
            companyNameEn?: string;
            companyNameZh?: string;
            isFinancialInstitute?: number;
            financialRegulatorPlace?: string;
            financialRegulator?: string;
            financialLicenseType?: string;
            isListed?: number;
            listingPlace?: string;
            listingExchange?: string;
            stockCode?: string;
            isGovOwned?: number;
            ownedGovPlace?: string;
            sameId?: number;
            businessType?: number;
            incorpPlace?: string;
        } = {};
        if (this.shareholderId != null) {
            data.shareholderId = this.shareholderId;
        }
        if (this.shareholderType != null) {
            data.shareholderType = this.shareholderType;
        }
        if (this.ownedSharesNumber != null) {
            data.ownedSharesNumber = this.ownedSharesNumber;
        }
        if (this.totalShares != null) {
            data.totalShares = this.totalShares;
        }
        if (this.ownedSharesPercent != null) {
            data.ownedSharesPercent = this.ownedSharesPercent;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.sort != null) {
            data.sort = this.sort;
        }
        if (this.parentId != null) {
            data.parentId = this.parentId;
        }
        if (this.firstNameEn != null) {
            data.firstNameEn = this.firstNameEn;
        }
        if (this.lastNameEn != null) {
            data.lastNameEn = this.lastNameEn;
        }
        if (this.nameZh != null) {
            data.nameZh = this.nameZh;
        }
        if (this.companyNameEn != null) {
            data.companyNameEn = this.companyNameEn;
        }
        if (this.companyNameZh != null) {
            data.companyNameZh = this.companyNameZh;
        }
        if (this.isFinancialInstitute != null) {
            data.isFinancialInstitute = this.isFinancialInstitute;
        }
        if (this.financialRegulatorPlace != null) {
            data.financialRegulatorPlace = this.financialRegulatorPlace;
        }
        if (this.financialRegulator != null) {
            data.financialRegulator = this.financialRegulator;
        }
        if (this.financialLicenseType != null) {
            data.financialLicenseType = this.financialLicenseType;
        }
        if (this.isListed != null) {
            data.isListed = this.isListed;
        }
        if (this.listingPlace != null) {
            data.listingPlace = this.listingPlace;
        }
        if (this.listingExchange != null) {
            data.listingExchange = this.listingExchange;
        }
        if (this.stockCode != null) {
            data.stockCode = this.stockCode;
        }
        if (this.isGovOwned != null) {
            data.isGovOwned = this.isGovOwned;
        }
        if (this.ownedGovPlace != null) {
            data.ownedGovPlace = this.ownedGovPlace;
        }
        if (this.sameId != null) {
            data.sameId = this.sameId;
        }
        if (this.businessType != null) {
            data.businessType = this.businessType;
        }
        if (this.incorpPlace != null) {
            data.incorpPlace = this.incorpPlace;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.shareholderId != 0)
            writer.writeInt64(1, this.shareholderId);
        if (this.shareholderType != 0)
            writer.writeInt32(2, this.shareholderType);
        if (this.ownedSharesNumber != 0)
            writer.writeInt32(3, this.ownedSharesNumber);
        if (this.totalShares != 0)
            writer.writeInt32(4, this.totalShares);
        if (this.ownedSharesPercent != 0)
            writer.writeDouble(5, this.ownedSharesPercent);
        if (this.level != 0)
            writer.writeInt32(6, this.level);
        if (this.sort != 0)
            writer.writeInt32(7, this.sort);
        if (this.parentId != 0)
            writer.writeInt64(8, this.parentId);
        if (this.firstNameEn.length)
            writer.writeString(9, this.firstNameEn);
        if (this.lastNameEn.length)
            writer.writeString(10, this.lastNameEn);
        if (this.nameZh.length)
            writer.writeString(11, this.nameZh);
        if (this.companyNameEn.length)
            writer.writeString(12, this.companyNameEn);
        if (this.companyNameZh.length)
            writer.writeString(13, this.companyNameZh);
        if (this.isFinancialInstitute != 0)
            writer.writeInt32(14, this.isFinancialInstitute);
        if (this.financialRegulatorPlace.length)
            writer.writeString(15, this.financialRegulatorPlace);
        if (this.financialRegulator.length)
            writer.writeString(16, this.financialRegulator);
        if (this.financialLicenseType.length)
            writer.writeString(17, this.financialLicenseType);
        if (this.isListed != 0)
            writer.writeInt32(18, this.isListed);
        if (this.listingPlace.length)
            writer.writeString(19, this.listingPlace);
        if (this.listingExchange.length)
            writer.writeString(20, this.listingExchange);
        if (this.stockCode.length)
            writer.writeString(21, this.stockCode);
        if (this.isGovOwned != 0)
            writer.writeInt32(22, this.isGovOwned);
        if (this.ownedGovPlace.length)
            writer.writeString(23, this.ownedGovPlace);
        if (this.sameId != 0)
            writer.writeInt64(24, this.sameId);
        if (this.businessType != 0)
            writer.writeInt32(25, this.businessType);
        if (this.incorpPlace.length)
            writer.writeString(26, this.incorpPlace);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShareholdersDtoReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShareholdersDtoReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.shareholderId = reader.readInt64();
                    break;
                case 2:
                    message.shareholderType = reader.readInt32();
                    break;
                case 3:
                    message.ownedSharesNumber = reader.readInt32();
                    break;
                case 4:
                    message.totalShares = reader.readInt32();
                    break;
                case 5:
                    message.ownedSharesPercent = reader.readDouble();
                    break;
                case 6:
                    message.level = reader.readInt32();
                    break;
                case 7:
                    message.sort = reader.readInt32();
                    break;
                case 8:
                    message.parentId = reader.readInt64();
                    break;
                case 9:
                    message.firstNameEn = reader.readString();
                    break;
                case 10:
                    message.lastNameEn = reader.readString();
                    break;
                case 11:
                    message.nameZh = reader.readString();
                    break;
                case 12:
                    message.companyNameEn = reader.readString();
                    break;
                case 13:
                    message.companyNameZh = reader.readString();
                    break;
                case 14:
                    message.isFinancialInstitute = reader.readInt32();
                    break;
                case 15:
                    message.financialRegulatorPlace = reader.readString();
                    break;
                case 16:
                    message.financialRegulator = reader.readString();
                    break;
                case 17:
                    message.financialLicenseType = reader.readString();
                    break;
                case 18:
                    message.isListed = reader.readInt32();
                    break;
                case 19:
                    message.listingPlace = reader.readString();
                    break;
                case 20:
                    message.listingExchange = reader.readString();
                    break;
                case 21:
                    message.stockCode = reader.readString();
                    break;
                case 22:
                    message.isGovOwned = reader.readInt32();
                    break;
                case 23:
                    message.ownedGovPlace = reader.readString();
                    break;
                case 24:
                    message.sameId = reader.readInt64();
                    break;
                case 25:
                    message.businessType = reader.readInt32();
                    break;
                case 26:
                    message.incorpPlace = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShareholdersDtoReq {
        return ShareholdersDtoReq.deserialize(bytes);
    }
}
export class KeyPeopleReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        quorum?: number;
        directorNum?: number;
        people?: KeyPeopleDtoReq[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("quorum" in data && data.quorum != undefined) {
                this.quorum = data.quorum;
            }
            if ("directorNum" in data && data.directorNum != undefined) {
                this.directorNum = data.directorNum;
            }
            if ("people" in data && data.people != undefined) {
                this.people = data.people;
            }
        }
    }
    get quorum() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set quorum(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get directorNum() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set directorNum(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get people() {
        return pb_1.Message.getRepeatedWrapperField(this, KeyPeopleDtoReq, 3) as KeyPeopleDtoReq[];
    }
    set people(value: KeyPeopleDtoReq[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        quorum?: number;
        directorNum?: number;
        people?: ReturnType<typeof KeyPeopleDtoReq.prototype.toObject>[];
    }): KeyPeopleReq {
        const message = new KeyPeopleReq({});
        if (data.quorum != null) {
            message.quorum = data.quorum;
        }
        if (data.directorNum != null) {
            message.directorNum = data.directorNum;
        }
        if (data.people != null) {
            message.people = data.people.map(item => KeyPeopleDtoReq.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            quorum?: number;
            directorNum?: number;
            people?: ReturnType<typeof KeyPeopleDtoReq.prototype.toObject>[];
        } = {};
        if (this.quorum != null) {
            data.quorum = this.quorum;
        }
        if (this.directorNum != null) {
            data.directorNum = this.directorNum;
        }
        if (this.people != null) {
            data.people = this.people.map((item: KeyPeopleDtoReq) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.quorum != 0)
            writer.writeInt32(1, this.quorum);
        if (this.directorNum != 0)
            writer.writeInt32(2, this.directorNum);
        if (this.people.length)
            writer.writeRepeatedMessage(3, this.people, (item: KeyPeopleDtoReq) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyPeopleReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyPeopleReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.quorum = reader.readInt32();
                    break;
                case 2:
                    message.directorNum = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.people, () => pb_1.Message.addToRepeatedWrapperField(message, 3, KeyPeopleDtoReq.deserialize(reader), KeyPeopleDtoReq));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KeyPeopleReq {
        return KeyPeopleReq.deserialize(bytes);
    }
}
export class KeyPeopleDtoReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        lastNameEn?: string;
        firstNameEn?: string;
        nameZh?: string;
        areaCode?: string;
        mobileNumber?: string;
        email?: string;
        gender?: number;
        region?: string;
        idType?: number;
        idIssuingJurisdiction?: string;
        idIssuingAuthority?: string;
        idDateOfIssuing?: number;
        idDateOfExpiry?: number;
        idNumber?: string;
        needLink?: boolean;
        isDirector?: boolean;
        isUbo?: boolean;
        isPartner?: boolean;
        isProfileController?: boolean;
        isWalletController?: boolean;
        isMandateUser?: boolean;
        peopleId?: number;
        birthdate?: number;
        isProfileCreator?: boolean;
        userId?: number;
        inviteCode?: string;
        mandateStatus?: number;
        isLinked?: number;
        lastNameEnConflict?: string;
        firstNameEnConflict?: string;
        nameCnConflict?: string;
        isSyncIdvInfo?: boolean;
        isOwner?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("lastNameEn" in data && data.lastNameEn != undefined) {
                this.lastNameEn = data.lastNameEn;
            }
            if ("firstNameEn" in data && data.firstNameEn != undefined) {
                this.firstNameEn = data.firstNameEn;
            }
            if ("nameZh" in data && data.nameZh != undefined) {
                this.nameZh = data.nameZh;
            }
            if ("areaCode" in data && data.areaCode != undefined) {
                this.areaCode = data.areaCode;
            }
            if ("mobileNumber" in data && data.mobileNumber != undefined) {
                this.mobileNumber = data.mobileNumber;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("gender" in data && data.gender != undefined) {
                this.gender = data.gender;
            }
            if ("region" in data && data.region != undefined) {
                this.region = data.region;
            }
            if ("idType" in data && data.idType != undefined) {
                this.idType = data.idType;
            }
            if ("idIssuingJurisdiction" in data && data.idIssuingJurisdiction != undefined) {
                this.idIssuingJurisdiction = data.idIssuingJurisdiction;
            }
            if ("idIssuingAuthority" in data && data.idIssuingAuthority != undefined) {
                this.idIssuingAuthority = data.idIssuingAuthority;
            }
            if ("idDateOfIssuing" in data && data.idDateOfIssuing != undefined) {
                this.idDateOfIssuing = data.idDateOfIssuing;
            }
            if ("idDateOfExpiry" in data && data.idDateOfExpiry != undefined) {
                this.idDateOfExpiry = data.idDateOfExpiry;
            }
            if ("idNumber" in data && data.idNumber != undefined) {
                this.idNumber = data.idNumber;
            }
            if ("needLink" in data && data.needLink != undefined) {
                this.needLink = data.needLink;
            }
            if ("isDirector" in data && data.isDirector != undefined) {
                this.isDirector = data.isDirector;
            }
            if ("isUbo" in data && data.isUbo != undefined) {
                this.isUbo = data.isUbo;
            }
            if ("isPartner" in data && data.isPartner != undefined) {
                this.isPartner = data.isPartner;
            }
            if ("isProfileController" in data && data.isProfileController != undefined) {
                this.isProfileController = data.isProfileController;
            }
            if ("isWalletController" in data && data.isWalletController != undefined) {
                this.isWalletController = data.isWalletController;
            }
            if ("isMandateUser" in data && data.isMandateUser != undefined) {
                this.isMandateUser = data.isMandateUser;
            }
            if ("peopleId" in data && data.peopleId != undefined) {
                this.peopleId = data.peopleId;
            }
            if ("birthdate" in data && data.birthdate != undefined) {
                this.birthdate = data.birthdate;
            }
            if ("isProfileCreator" in data && data.isProfileCreator != undefined) {
                this.isProfileCreator = data.isProfileCreator;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("inviteCode" in data && data.inviteCode != undefined) {
                this.inviteCode = data.inviteCode;
            }
            if ("mandateStatus" in data && data.mandateStatus != undefined) {
                this.mandateStatus = data.mandateStatus;
            }
            if ("isLinked" in data && data.isLinked != undefined) {
                this.isLinked = data.isLinked;
            }
            if ("lastNameEnConflict" in data && data.lastNameEnConflict != undefined) {
                this.lastNameEnConflict = data.lastNameEnConflict;
            }
            if ("firstNameEnConflict" in data && data.firstNameEnConflict != undefined) {
                this.firstNameEnConflict = data.firstNameEnConflict;
            }
            if ("nameCnConflict" in data && data.nameCnConflict != undefined) {
                this.nameCnConflict = data.nameCnConflict;
            }
            if ("isSyncIdvInfo" in data && data.isSyncIdvInfo != undefined) {
                this.isSyncIdvInfo = data.isSyncIdvInfo;
            }
            if ("isOwner" in data && data.isOwner != undefined) {
                this.isOwner = data.isOwner;
            }
        }
    }
    get lastNameEn() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set lastNameEn(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get firstNameEn() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set firstNameEn(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get nameZh() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set nameZh(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get areaCode() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set areaCode(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get mobileNumber() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set mobileNumber(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get gender() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set gender(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get region() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set region(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get idType() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set idType(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get idIssuingJurisdiction() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set idIssuingJurisdiction(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get idIssuingAuthority() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set idIssuingAuthority(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get idDateOfIssuing() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set idDateOfIssuing(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get idDateOfExpiry() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set idDateOfExpiry(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get idNumber() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set idNumber(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get needLink() {
        return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
    }
    set needLink(value: boolean) {
        pb_1.Message.setField(this, 15, value);
    }
    get isDirector() {
        return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
    }
    set isDirector(value: boolean) {
        pb_1.Message.setField(this, 16, value);
    }
    get isUbo() {
        return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
    }
    set isUbo(value: boolean) {
        pb_1.Message.setField(this, 17, value);
    }
    get isPartner() {
        return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
    }
    set isPartner(value: boolean) {
        pb_1.Message.setField(this, 18, value);
    }
    get isProfileController() {
        return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
    }
    set isProfileController(value: boolean) {
        pb_1.Message.setField(this, 19, value);
    }
    get isWalletController() {
        return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
    }
    set isWalletController(value: boolean) {
        pb_1.Message.setField(this, 20, value);
    }
    get isMandateUser() {
        return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
    }
    set isMandateUser(value: boolean) {
        pb_1.Message.setField(this, 21, value);
    }
    get peopleId() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set peopleId(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    get birthdate() {
        return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
    }
    set birthdate(value: number) {
        pb_1.Message.setField(this, 23, value);
    }
    get isProfileCreator() {
        return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
    }
    set isProfileCreator(value: boolean) {
        pb_1.Message.setField(this, 24, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 25, value);
    }
    get inviteCode() {
        return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
    }
    set inviteCode(value: string) {
        pb_1.Message.setField(this, 26, value);
    }
    get mandateStatus() {
        return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
    }
    set mandateStatus(value: number) {
        pb_1.Message.setField(this, 27, value);
    }
    get isLinked() {
        return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
    }
    set isLinked(value: number) {
        pb_1.Message.setField(this, 28, value);
    }
    get lastNameEnConflict() {
        return pb_1.Message.getFieldWithDefault(this, 29, "") as string;
    }
    set lastNameEnConflict(value: string) {
        pb_1.Message.setField(this, 29, value);
    }
    get firstNameEnConflict() {
        return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
    }
    set firstNameEnConflict(value: string) {
        pb_1.Message.setField(this, 30, value);
    }
    get nameCnConflict() {
        return pb_1.Message.getFieldWithDefault(this, 31, "") as string;
    }
    set nameCnConflict(value: string) {
        pb_1.Message.setField(this, 31, value);
    }
    get isSyncIdvInfo() {
        return pb_1.Message.getFieldWithDefault(this, 32, false) as boolean;
    }
    set isSyncIdvInfo(value: boolean) {
        pb_1.Message.setField(this, 32, value);
    }
    get isOwner() {
        return pb_1.Message.getFieldWithDefault(this, 33, false) as boolean;
    }
    set isOwner(value: boolean) {
        pb_1.Message.setField(this, 33, value);
    }
    static fromObject(data: {
        lastNameEn?: string;
        firstNameEn?: string;
        nameZh?: string;
        areaCode?: string;
        mobileNumber?: string;
        email?: string;
        gender?: number;
        region?: string;
        idType?: number;
        idIssuingJurisdiction?: string;
        idIssuingAuthority?: string;
        idDateOfIssuing?: number;
        idDateOfExpiry?: number;
        idNumber?: string;
        needLink?: boolean;
        isDirector?: boolean;
        isUbo?: boolean;
        isPartner?: boolean;
        isProfileController?: boolean;
        isWalletController?: boolean;
        isMandateUser?: boolean;
        peopleId?: number;
        birthdate?: number;
        isProfileCreator?: boolean;
        userId?: number;
        inviteCode?: string;
        mandateStatus?: number;
        isLinked?: number;
        lastNameEnConflict?: string;
        firstNameEnConflict?: string;
        nameCnConflict?: string;
        isSyncIdvInfo?: boolean;
        isOwner?: boolean;
    }): KeyPeopleDtoReq {
        const message = new KeyPeopleDtoReq({});
        if (data.lastNameEn != null) {
            message.lastNameEn = data.lastNameEn;
        }
        if (data.firstNameEn != null) {
            message.firstNameEn = data.firstNameEn;
        }
        if (data.nameZh != null) {
            message.nameZh = data.nameZh;
        }
        if (data.areaCode != null) {
            message.areaCode = data.areaCode;
        }
        if (data.mobileNumber != null) {
            message.mobileNumber = data.mobileNumber;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.gender != null) {
            message.gender = data.gender;
        }
        if (data.region != null) {
            message.region = data.region;
        }
        if (data.idType != null) {
            message.idType = data.idType;
        }
        if (data.idIssuingJurisdiction != null) {
            message.idIssuingJurisdiction = data.idIssuingJurisdiction;
        }
        if (data.idIssuingAuthority != null) {
            message.idIssuingAuthority = data.idIssuingAuthority;
        }
        if (data.idDateOfIssuing != null) {
            message.idDateOfIssuing = data.idDateOfIssuing;
        }
        if (data.idDateOfExpiry != null) {
            message.idDateOfExpiry = data.idDateOfExpiry;
        }
        if (data.idNumber != null) {
            message.idNumber = data.idNumber;
        }
        if (data.needLink != null) {
            message.needLink = data.needLink;
        }
        if (data.isDirector != null) {
            message.isDirector = data.isDirector;
        }
        if (data.isUbo != null) {
            message.isUbo = data.isUbo;
        }
        if (data.isPartner != null) {
            message.isPartner = data.isPartner;
        }
        if (data.isProfileController != null) {
            message.isProfileController = data.isProfileController;
        }
        if (data.isWalletController != null) {
            message.isWalletController = data.isWalletController;
        }
        if (data.isMandateUser != null) {
            message.isMandateUser = data.isMandateUser;
        }
        if (data.peopleId != null) {
            message.peopleId = data.peopleId;
        }
        if (data.birthdate != null) {
            message.birthdate = data.birthdate;
        }
        if (data.isProfileCreator != null) {
            message.isProfileCreator = data.isProfileCreator;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.inviteCode != null) {
            message.inviteCode = data.inviteCode;
        }
        if (data.mandateStatus != null) {
            message.mandateStatus = data.mandateStatus;
        }
        if (data.isLinked != null) {
            message.isLinked = data.isLinked;
        }
        if (data.lastNameEnConflict != null) {
            message.lastNameEnConflict = data.lastNameEnConflict;
        }
        if (data.firstNameEnConflict != null) {
            message.firstNameEnConflict = data.firstNameEnConflict;
        }
        if (data.nameCnConflict != null) {
            message.nameCnConflict = data.nameCnConflict;
        }
        if (data.isSyncIdvInfo != null) {
            message.isSyncIdvInfo = data.isSyncIdvInfo;
        }
        if (data.isOwner != null) {
            message.isOwner = data.isOwner;
        }
        return message;
    }
    toObject() {
        const data: {
            lastNameEn?: string;
            firstNameEn?: string;
            nameZh?: string;
            areaCode?: string;
            mobileNumber?: string;
            email?: string;
            gender?: number;
            region?: string;
            idType?: number;
            idIssuingJurisdiction?: string;
            idIssuingAuthority?: string;
            idDateOfIssuing?: number;
            idDateOfExpiry?: number;
            idNumber?: string;
            needLink?: boolean;
            isDirector?: boolean;
            isUbo?: boolean;
            isPartner?: boolean;
            isProfileController?: boolean;
            isWalletController?: boolean;
            isMandateUser?: boolean;
            peopleId?: number;
            birthdate?: number;
            isProfileCreator?: boolean;
            userId?: number;
            inviteCode?: string;
            mandateStatus?: number;
            isLinked?: number;
            lastNameEnConflict?: string;
            firstNameEnConflict?: string;
            nameCnConflict?: string;
            isSyncIdvInfo?: boolean;
            isOwner?: boolean;
        } = {};
        if (this.lastNameEn != null) {
            data.lastNameEn = this.lastNameEn;
        }
        if (this.firstNameEn != null) {
            data.firstNameEn = this.firstNameEn;
        }
        if (this.nameZh != null) {
            data.nameZh = this.nameZh;
        }
        if (this.areaCode != null) {
            data.areaCode = this.areaCode;
        }
        if (this.mobileNumber != null) {
            data.mobileNumber = this.mobileNumber;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.gender != null) {
            data.gender = this.gender;
        }
        if (this.region != null) {
            data.region = this.region;
        }
        if (this.idType != null) {
            data.idType = this.idType;
        }
        if (this.idIssuingJurisdiction != null) {
            data.idIssuingJurisdiction = this.idIssuingJurisdiction;
        }
        if (this.idIssuingAuthority != null) {
            data.idIssuingAuthority = this.idIssuingAuthority;
        }
        if (this.idDateOfIssuing != null) {
            data.idDateOfIssuing = this.idDateOfIssuing;
        }
        if (this.idDateOfExpiry != null) {
            data.idDateOfExpiry = this.idDateOfExpiry;
        }
        if (this.idNumber != null) {
            data.idNumber = this.idNumber;
        }
        if (this.needLink != null) {
            data.needLink = this.needLink;
        }
        if (this.isDirector != null) {
            data.isDirector = this.isDirector;
        }
        if (this.isUbo != null) {
            data.isUbo = this.isUbo;
        }
        if (this.isPartner != null) {
            data.isPartner = this.isPartner;
        }
        if (this.isProfileController != null) {
            data.isProfileController = this.isProfileController;
        }
        if (this.isWalletController != null) {
            data.isWalletController = this.isWalletController;
        }
        if (this.isMandateUser != null) {
            data.isMandateUser = this.isMandateUser;
        }
        if (this.peopleId != null) {
            data.peopleId = this.peopleId;
        }
        if (this.birthdate != null) {
            data.birthdate = this.birthdate;
        }
        if (this.isProfileCreator != null) {
            data.isProfileCreator = this.isProfileCreator;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.inviteCode != null) {
            data.inviteCode = this.inviteCode;
        }
        if (this.mandateStatus != null) {
            data.mandateStatus = this.mandateStatus;
        }
        if (this.isLinked != null) {
            data.isLinked = this.isLinked;
        }
        if (this.lastNameEnConflict != null) {
            data.lastNameEnConflict = this.lastNameEnConflict;
        }
        if (this.firstNameEnConflict != null) {
            data.firstNameEnConflict = this.firstNameEnConflict;
        }
        if (this.nameCnConflict != null) {
            data.nameCnConflict = this.nameCnConflict;
        }
        if (this.isSyncIdvInfo != null) {
            data.isSyncIdvInfo = this.isSyncIdvInfo;
        }
        if (this.isOwner != null) {
            data.isOwner = this.isOwner;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.lastNameEn.length)
            writer.writeString(1, this.lastNameEn);
        if (this.firstNameEn.length)
            writer.writeString(2, this.firstNameEn);
        if (this.nameZh.length)
            writer.writeString(3, this.nameZh);
        if (this.areaCode.length)
            writer.writeString(4, this.areaCode);
        if (this.mobileNumber.length)
            writer.writeString(5, this.mobileNumber);
        if (this.email.length)
            writer.writeString(6, this.email);
        if (this.gender != 0)
            writer.writeInt32(7, this.gender);
        if (this.region.length)
            writer.writeString(8, this.region);
        if (this.idType != 0)
            writer.writeInt32(9, this.idType);
        if (this.idIssuingJurisdiction.length)
            writer.writeString(10, this.idIssuingJurisdiction);
        if (this.idIssuingAuthority.length)
            writer.writeString(11, this.idIssuingAuthority);
        if (this.idDateOfIssuing != 0)
            writer.writeInt64(12, this.idDateOfIssuing);
        if (this.idDateOfExpiry != 0)
            writer.writeInt64(13, this.idDateOfExpiry);
        if (this.idNumber.length)
            writer.writeString(14, this.idNumber);
        if (this.needLink != false)
            writer.writeBool(15, this.needLink);
        if (this.isDirector != false)
            writer.writeBool(16, this.isDirector);
        if (this.isUbo != false)
            writer.writeBool(17, this.isUbo);
        if (this.isPartner != false)
            writer.writeBool(18, this.isPartner);
        if (this.isProfileController != false)
            writer.writeBool(19, this.isProfileController);
        if (this.isWalletController != false)
            writer.writeBool(20, this.isWalletController);
        if (this.isMandateUser != false)
            writer.writeBool(21, this.isMandateUser);
        if (this.peopleId != 0)
            writer.writeInt64(22, this.peopleId);
        if (this.birthdate != 0)
            writer.writeInt64(23, this.birthdate);
        if (this.isProfileCreator != false)
            writer.writeBool(24, this.isProfileCreator);
        if (this.userId != 0)
            writer.writeInt64(25, this.userId);
        if (this.inviteCode.length)
            writer.writeString(26, this.inviteCode);
        if (this.mandateStatus != 0)
            writer.writeInt32(27, this.mandateStatus);
        if (this.isLinked != 0)
            writer.writeInt32(28, this.isLinked);
        if (this.lastNameEnConflict.length)
            writer.writeString(29, this.lastNameEnConflict);
        if (this.firstNameEnConflict.length)
            writer.writeString(30, this.firstNameEnConflict);
        if (this.nameCnConflict.length)
            writer.writeString(31, this.nameCnConflict);
        if (this.isSyncIdvInfo != false)
            writer.writeBool(32, this.isSyncIdvInfo);
        if (this.isOwner != false)
            writer.writeBool(33, this.isOwner);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyPeopleDtoReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyPeopleDtoReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.lastNameEn = reader.readString();
                    break;
                case 2:
                    message.firstNameEn = reader.readString();
                    break;
                case 3:
                    message.nameZh = reader.readString();
                    break;
                case 4:
                    message.areaCode = reader.readString();
                    break;
                case 5:
                    message.mobileNumber = reader.readString();
                    break;
                case 6:
                    message.email = reader.readString();
                    break;
                case 7:
                    message.gender = reader.readInt32();
                    break;
                case 8:
                    message.region = reader.readString();
                    break;
                case 9:
                    message.idType = reader.readInt32();
                    break;
                case 10:
                    message.idIssuingJurisdiction = reader.readString();
                    break;
                case 11:
                    message.idIssuingAuthority = reader.readString();
                    break;
                case 12:
                    message.idDateOfIssuing = reader.readInt64();
                    break;
                case 13:
                    message.idDateOfExpiry = reader.readInt64();
                    break;
                case 14:
                    message.idNumber = reader.readString();
                    break;
                case 15:
                    message.needLink = reader.readBool();
                    break;
                case 16:
                    message.isDirector = reader.readBool();
                    break;
                case 17:
                    message.isUbo = reader.readBool();
                    break;
                case 18:
                    message.isPartner = reader.readBool();
                    break;
                case 19:
                    message.isProfileController = reader.readBool();
                    break;
                case 20:
                    message.isWalletController = reader.readBool();
                    break;
                case 21:
                    message.isMandateUser = reader.readBool();
                    break;
                case 22:
                    message.peopleId = reader.readInt64();
                    break;
                case 23:
                    message.birthdate = reader.readInt64();
                    break;
                case 24:
                    message.isProfileCreator = reader.readBool();
                    break;
                case 25:
                    message.userId = reader.readInt64();
                    break;
                case 26:
                    message.inviteCode = reader.readString();
                    break;
                case 27:
                    message.mandateStatus = reader.readInt32();
                    break;
                case 28:
                    message.isLinked = reader.readInt32();
                    break;
                case 29:
                    message.lastNameEnConflict = reader.readString();
                    break;
                case 30:
                    message.firstNameEnConflict = reader.readString();
                    break;
                case 31:
                    message.nameCnConflict = reader.readString();
                    break;
                case 32:
                    message.isSyncIdvInfo = reader.readBool();
                    break;
                case 33:
                    message.isOwner = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KeyPeopleDtoReq {
        return KeyPeopleDtoReq.deserialize(bytes);
    }
}
export class WalletOpenAccountReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        reasons?: number[];
        sourceOfFunds?: string[];
        expectedBusinessCounterparties?: string;
        expectedFlow?: number;
        businessInvolves?: number;
        questionVersion?: string;
        answers?: WalletOpenAccountAnswers[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 100], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reasons" in data && data.reasons != undefined) {
                this.reasons = data.reasons;
            }
            if ("sourceOfFunds" in data && data.sourceOfFunds != undefined) {
                this.sourceOfFunds = data.sourceOfFunds;
            }
            if ("expectedBusinessCounterparties" in data && data.expectedBusinessCounterparties != undefined) {
                this.expectedBusinessCounterparties = data.expectedBusinessCounterparties;
            }
            if ("expectedFlow" in data && data.expectedFlow != undefined) {
                this.expectedFlow = data.expectedFlow;
            }
            if ("businessInvolves" in data && data.businessInvolves != undefined) {
                this.businessInvolves = data.businessInvolves;
            }
            if ("questionVersion" in data && data.questionVersion != undefined) {
                this.questionVersion = data.questionVersion;
            }
            if ("answers" in data && data.answers != undefined) {
                this.answers = data.answers;
            }
        }
    }
    get reasons() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
    }
    set reasons(value: number[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get sourceOfFunds() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set sourceOfFunds(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get expectedBusinessCounterparties() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set expectedBusinessCounterparties(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get expectedFlow() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set expectedFlow(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get businessInvolves() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set businessInvolves(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get questionVersion() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set questionVersion(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get answers() {
        return pb_1.Message.getRepeatedWrapperField(this, WalletOpenAccountAnswers, 100) as WalletOpenAccountAnswers[];
    }
    set answers(value: WalletOpenAccountAnswers[]) {
        pb_1.Message.setRepeatedWrapperField(this, 100, value);
    }
    static fromObject(data: {
        reasons?: number[];
        sourceOfFunds?: string[];
        expectedBusinessCounterparties?: string;
        expectedFlow?: number;
        businessInvolves?: number;
        questionVersion?: string;
        answers?: ReturnType<typeof WalletOpenAccountAnswers.prototype.toObject>[];
    }): WalletOpenAccountReq {
        const message = new WalletOpenAccountReq({});
        if (data.reasons != null) {
            message.reasons = data.reasons;
        }
        if (data.sourceOfFunds != null) {
            message.sourceOfFunds = data.sourceOfFunds;
        }
        if (data.expectedBusinessCounterparties != null) {
            message.expectedBusinessCounterparties = data.expectedBusinessCounterparties;
        }
        if (data.expectedFlow != null) {
            message.expectedFlow = data.expectedFlow;
        }
        if (data.businessInvolves != null) {
            message.businessInvolves = data.businessInvolves;
        }
        if (data.questionVersion != null) {
            message.questionVersion = data.questionVersion;
        }
        if (data.answers != null) {
            message.answers = data.answers.map(item => WalletOpenAccountAnswers.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            reasons?: number[];
            sourceOfFunds?: string[];
            expectedBusinessCounterparties?: string;
            expectedFlow?: number;
            businessInvolves?: number;
            questionVersion?: string;
            answers?: ReturnType<typeof WalletOpenAccountAnswers.prototype.toObject>[];
        } = {};
        if (this.reasons != null) {
            data.reasons = this.reasons;
        }
        if (this.sourceOfFunds != null) {
            data.sourceOfFunds = this.sourceOfFunds;
        }
        if (this.expectedBusinessCounterparties != null) {
            data.expectedBusinessCounterparties = this.expectedBusinessCounterparties;
        }
        if (this.expectedFlow != null) {
            data.expectedFlow = this.expectedFlow;
        }
        if (this.businessInvolves != null) {
            data.businessInvolves = this.businessInvolves;
        }
        if (this.questionVersion != null) {
            data.questionVersion = this.questionVersion;
        }
        if (this.answers != null) {
            data.answers = this.answers.map((item: WalletOpenAccountAnswers) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.reasons.length)
            writer.writePackedInt32(1, this.reasons);
        if (this.sourceOfFunds.length)
            writer.writeRepeatedString(2, this.sourceOfFunds);
        if (this.expectedBusinessCounterparties.length)
            writer.writeString(3, this.expectedBusinessCounterparties);
        if (this.expectedFlow != 0)
            writer.writeInt32(4, this.expectedFlow);
        if (this.businessInvolves != 0)
            writer.writeInt32(5, this.businessInvolves);
        if (this.questionVersion.length)
            writer.writeString(6, this.questionVersion);
        if (this.answers.length)
            writer.writeRepeatedMessage(100, this.answers, (item: WalletOpenAccountAnswers) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WalletOpenAccountReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WalletOpenAccountReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.reasons = reader.readPackedInt32();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                case 3:
                    message.expectedBusinessCounterparties = reader.readString();
                    break;
                case 4:
                    message.expectedFlow = reader.readInt32();
                    break;
                case 5:
                    message.businessInvolves = reader.readInt32();
                    break;
                case 6:
                    message.questionVersion = reader.readString();
                    break;
                case 100:
                    reader.readMessage(message.answers, () => pb_1.Message.addToRepeatedWrapperField(message, 100, WalletOpenAccountAnswers.deserialize(reader), WalletOpenAccountAnswers));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WalletOpenAccountReq {
        return WalletOpenAccountReq.deserialize(bytes);
    }
}
export class WalletOpenAccountAnswers extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        questionIndex?: number;
        optionIndex?: number[];
        content?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("questionIndex" in data && data.questionIndex != undefined) {
                this.questionIndex = data.questionIndex;
            }
            if ("optionIndex" in data && data.optionIndex != undefined) {
                this.optionIndex = data.optionIndex;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
        }
    }
    get questionIndex() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set questionIndex(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get optionIndex() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set optionIndex(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set content(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        questionIndex?: number;
        optionIndex?: number[];
        content?: string;
    }): WalletOpenAccountAnswers {
        const message = new WalletOpenAccountAnswers({});
        if (data.questionIndex != null) {
            message.questionIndex = data.questionIndex;
        }
        if (data.optionIndex != null) {
            message.optionIndex = data.optionIndex;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        return message;
    }
    toObject() {
        const data: {
            questionIndex?: number;
            optionIndex?: number[];
            content?: string;
        } = {};
        if (this.questionIndex != null) {
            data.questionIndex = this.questionIndex;
        }
        if (this.optionIndex != null) {
            data.optionIndex = this.optionIndex;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.questionIndex != 0)
            writer.writeInt32(1, this.questionIndex);
        if (this.optionIndex.length)
            writer.writePackedInt32(2, this.optionIndex);
        if (this.content.length)
            writer.writeString(3, this.content);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WalletOpenAccountAnswers {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WalletOpenAccountAnswers();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.questionIndex = reader.readInt32();
                    break;
                case 2:
                    message.optionIndex = reader.readPackedInt32();
                    break;
                case 3:
                    message.content = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WalletOpenAccountAnswers {
        return WalletOpenAccountAnswers.deserialize(bytes);
    }
}
